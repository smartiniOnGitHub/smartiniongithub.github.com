[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/cloudevent.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\n/**\r\n * CloudEvent:\r\n * this module exports some useful definition and utility related to CloudEvents.\r\n */\r\n\r\n/**\r\n * Get a reference to cloudevent Validator class.\r\n *\r\n * @see Validator\r\n */\r\nconst V = require('./validator') // get validator from here\r\n\r\n/**\r\n * Get a reference to cloudevent Transformer class.\r\n *\r\n * @see Transformer\r\n */\r\nconst T = require('./transformer') // get transformer from here\r\n\r\n/**\r\n * CloudEvent implementation.\r\n *\r\n * @see https://github.com/cloudevents/spec/blob/master/json-format.md\r\n */\r\nclass CloudEvent {\r\n  /**\r\n   * Create a new instance of a CloudEvent object.\r\n   * @param {!string} eventID the ID of the event (unique), mandatory\r\n   * @param {!string} eventType the type of the event (usually), mandatory\r\n   * @param {!uri} source the source uri of the event (use '/' if empty), mandatory\r\n   * @param {(object|Map|Set)} data the real event data\r\n   * @param {object} options optional attributes of the event; some has default values chosen here:\r\n   *        eventTypeVersion (string) optional,\r\n   *        eventTime (timestamp, default now),\r\n   *        extensions (object) optional but if given must contain at least 1 property (key/value),\r\n   *        contentType (string, default 'application/json') tell how the data attribute must be encoded,\r\n   *        schemaURL (uri) optional,\r\n   *        strict (boolean, default false) tell if object instance will be validated in a more strict way\r\n   * @throws {Error} if strict is true and eventID or eventType is undefined or null\r\n   */\r\n  constructor (eventID, eventType, source, data, {\r\n    eventTypeVersion,\r\n    eventTime = new Date(),\r\n    extensions,\r\n    contentType = CloudEvent.contentTypeDefault(),\r\n    schemaURL,\r\n    strict = false } = {}\r\n  ) {\r\n    if (strict === true) {\r\n      if (!eventID || !eventType || !source) {\r\n        throw new Error('Unable to create CloudEvent instance, mandatory field missing')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * The event ID.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.eventID = eventID\r\n    /**\r\n     * The event type.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.eventType = eventType\r\n    /**\r\n     * The source URI of the event.\r\n     * @type {uri}\r\n     * @private\r\n     */\r\n    this.source = source\r\n    /**\r\n     * The real event data.\r\n     * Usually it's an object, but could be even a Map or a Set.\r\n     * Copy the original object to avoid changing objects that could be shared.\r\n     * @type {(object|Map|Set)}\r\n     * @private\r\n     */\r\n    this.data = { ...data }\r\n    if (V.isString(data)) {\r\n      // handle an edge case: if the given data is a String, I need to clone in a different way ...\r\n      this.data = data.slice()\r\n    }\r\n\r\n    /**\r\n     * The CloudEvent specification version.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.cloudEventsVersion = this.constructor.version()\r\n    /**\r\n     * The MIME Type for the encoding of the data attribute, when serialized.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.contentType = contentType\r\n    /**\r\n     * The event timestamp.\r\n     * Copy the original object to avoid changing objects that could be shared.\r\n     * @type {timestamp}\r\n     * @private\r\n     */\r\n    this.eventTime = new Date(eventTime.valueOf())\r\n    /**\r\n     * The event version.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.eventTypeVersion = eventTypeVersion\r\n    /**\r\n     * Extensions defined for the event.\r\n     * Copy the original object to avoid changing objects that could be shared.\r\n     * @type {object}\r\n     * @private\r\n     */\r\n    this.extensions = { ...extensions }\r\n    /**\r\n     * The URL of schema for the event, if any.\r\n     * @type {uri}\r\n     * @private\r\n     */\r\n    this.schemaURL = schemaURL\r\n\r\n    // add strict to extensions, but only when defined\r\n    if (strict === true) {\r\n      this.extensions = this.extensions || {}\r\n      this.extensions.strict = strict\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the version of the CloudEvent Specification implemented here\r\n   *\r\n   * @static\r\n   * @return {string} the value\r\n   */\r\n  static version () {\r\n    return '0.1'\r\n  }\r\n\r\n  /**\r\n   * Return the default content Type for a CloudEvent\r\n   *\r\n   * @static\r\n   * @return {string} the value\r\n   */\r\n  static contentTypeDefault () {\r\n    return 'application/json'\r\n  }\r\n\r\n  /**\r\n   * Return the MIME Type for a CloudEvent\r\n   *\r\n   * @static\r\n   * @return {string} the value\r\n   */\r\n  static mediaType () {\r\n    return 'application/cloudevents+json'\r\n  }\r\n\r\n  /**\r\n   * Tell if the object has the strict flag enabled.\r\n   *\r\n   * @static\r\n   * @param {!object} event the CloudEvent to validate\r\n   * @return {boolean} true if strict, otherwise false\r\n   * @throws {TypeError} if event is not a CloudEvent instance or subclass\r\n   * @throws {Error} if event is undefined or null\r\n   */\r\n  static isStrictEvent (event) {\r\n    if (!CloudEvent.isCloudEvent(event)) {\r\n      throw new TypeError('The given event is not a CloudEvent instance')\r\n    }\r\n    if (V.isDefinedAndNotNull(event.extensions)) {\r\n      return event.extensions.strict === true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate the given CloudEvent.\r\n   *\r\n   * @static\r\n   * @param {!object} event the CloudEvent to validate\r\n   * @param {object} options containing: strict (boolean, default false) to validate it in a more strict way\r\n   * @return {object[]} an array of (non null) validation errors, or at least an empty array\r\n   */\r\n  static validateEvent (event, { strict = false } = {}) {\r\n    if (V.isUndefinedOrNull(event)) {\r\n      return [new Error('CloudEvent undefined or null')]\r\n    }\r\n    let ve = [] // validation errors\r\n\r\n    // standard validation\r\n    // note that some properties are not checked here because I assign a default value, and I check them in strict mode, like:\r\n    // data, eventTime, extensions, contentType ...\r\n    // ve.push(V.ensureIsStringNotEmpty(event.cloudEventsVersion, 'cloudEventsVersion')) // no more a public attribute\r\n    ve.push(V.ensureIsStringNotEmpty(event.eventID, 'eventID'))\r\n    ve.push(V.ensureIsStringNotEmpty(event.eventType, 'eventType'))\r\n    ve.push(V.ensureIsStringNotEmpty(event.source, 'source'))\r\n    if (V.isDefinedAndNotNull(event.eventTypeVersion)) {\r\n      ve.push(V.ensureIsStringNotEmpty(event.eventTypeVersion, 'eventTypeVersion'))\r\n    }\r\n    if (V.isDefinedAndNotNull(event.schemaURL)) {\r\n      ve.push(V.ensureIsStringNotEmpty(event.schemaURL, 'schemaURL'))\r\n    }\r\n\r\n    // additional validation if strict mode enabled, or if enabled in the event ...\r\n    if (strict === true || CloudEvent.isStrictEvent(event) === true) {\r\n      ve.push(V.ensureIsClass(event, CloudEvent, 'CloudEvent_Subclass'))\r\n      ve.push(V.ensureIsVersion(event.cloudEventsVersion, 'cloudEventsVersion'))\r\n      if (V.isDefinedAndNotNull(event.data)) {\r\n        ve.push(V.ensureIsObjectOrCollectionNotString(event.data, 'data'))\r\n      }\r\n      if (V.isDefinedAndNotNull(event.eventTypeVersion)) {\r\n        ve.push(V.ensureIsVersion(event.eventTypeVersion, 'eventTypeVersion'))\r\n      }\r\n      ve.push(V.ensureIsURI(event.source, null, 'source'))\r\n      if (V.isDefinedAndNotNull(event.extensions)) {\r\n        ve.push(V.ensureIsObjectOrCollectionNotString(event.extensions, 'extensions'))\r\n        const extensionsSize = V.getSize(event.extensions)\r\n        if (extensionsSize < 1) {\r\n          ve.push(new Error(`The object 'extensions' must contain at least 1 property`))\r\n        }\r\n      }\r\n      ve.push(V.ensureIsDatePast(event.eventTime, 'eventTime'))\r\n      ve.push(V.ensureIsStringNotEmpty(event.contentType, 'contentType'))\r\n      ve.push(V.ensureIsURI(event.schemaURL, null, 'schemaURL'))\r\n    }\r\n\r\n    return ve.filter((i) => i)\r\n  }\r\n\r\n  /**\r\n   * Tell the given CloudEvent, if it's valid.\r\n   *\r\n   * See {@link CloudEvent.validateEvent}.\r\n   *\r\n   * @static\r\n   * @param {!object} event the CloudEvent to validate\r\n   * @param {object} options containing: strict (boolean, default false) to validate it in a more strict way\r\n   * @return {boolean} true if valid, otherwise false\r\n   */\r\n  static isValidEvent (event, { strict = false } = {}) {\r\n    const validationErrors = CloudEvent.validateEvent(event, { strict })\r\n    const size = V.getSize(validationErrors)\r\n    return (size === 0)\r\n  }\r\n\r\n  /**\r\n   * Tell the given CloudEvent, if it's instance of the CloudEvent class or a subclass of it.\r\n   *\r\n   * @static\r\n   * @param {!object} event the CloudEvent to check\r\n   * @return {boolean} true if it's an instance (or a subclass), otherwise false\r\n   */\r\n  static isCloudEvent (event) {\r\n    if (V.isUndefinedOrNull(event)) {\r\n      throw new Error('CloudEvent undefined or null')\r\n    }\r\n    return V.isClass(event, CloudEvent)\r\n  }\r\n\r\n  /**\r\n   * Serialize the given CloudEvent in JSON format.\r\n   * Note that here standard serialization to JSON is used (no additional libraries).\r\n   * Note that the result of encoder function is assigned to encoded data.\r\n   *\r\n   * @param {!object} event the CloudEvent to serialize\r\n   * @param {object} options optional serialization attributes:\r\n   *        encoder (function, no default) a function that takes data and returns encoded data,\r\n   *        encodedData (string, no default) already encoded data (but consistency with the contentType is not checked),\r\n   * @return {string} the serialized event, as a string\r\n   * @throws {Error} if event is undefined or null, or an option is undefined/null/wrong\r\n   */\r\n  static serializeEvent (event, { encoder, encodedData } = {}) {\r\n    if (V.isUndefinedOrNull(event)) {\r\n      throw new Error('CloudEvent undefined or null')\r\n    }\r\n    if (event.contentType === CloudEvent.contentTypeDefault()) {\r\n      return JSON.stringify(event)\r\n    }\r\n    // else\r\n    if (V.isDefinedAndNotNull(encoder)) {\r\n      if (!V.isFunction(encoder)) {\r\n        throw new Error(`Missing or wrong encoder function: '${encoder}' for the given content type: '${event.contentType}'.`)\r\n      }\r\n      encodedData = encoder(event.payload)\r\n    } else {\r\n      // encoder not defined, check encodedData\r\n      if (!V.isDefinedAndNotNull(encodedData)) {\r\n        throw new Error(`Missing encoder function: use encoder function or already encoded data with the given content type: '${event.contentType}'.`)\r\n      }\r\n    }\r\n    if (!V.isStringNotEmpty(encodedData)) {\r\n      throw new Error(`Missing or wrong encoded data: '${encodedData}' for the given content type: '${event.contentType}'.`)\r\n    }\r\n    return JSON.stringify({ ...event, data: encodedData })\r\n  }\r\n\r\n  /**\r\n   * Deserialize/parse the given CloudEvent from JSON format.\r\n   * Note that here standard parse from JSON is used (no additional libraries).\r\n   * Note that the result of decoder function is assigned to decoded data.\r\n   *\r\n   * @param {!string} ser the serialized CloudEvent to parse/deserialize\r\n   * @param {object} options optional deserialization attributes:\r\n   *        decoder (function, no default) a function that takes data and returns decoder data,\r\n   *        decodedData (object, no default) already decoded data (but consistency with the contentType is not checked),\r\n   * @return {object} the deserialized event as a CloudEvent instance\r\n   * @throws {Error} if event is undefined or null, or an option is undefined/null/wrong\r\n   * @throws {Error} in case of JSON parsing error\r\n   */\r\n  static deserializeEvent (ser, { decoder, decodedData } = {}) {\r\n    if (V.isUndefinedOrNull(ser)) {\r\n      throw new Error('Serialized CloudEvent undefined or null')\r\n    }\r\n    if (!V.isStringNotEmpty(ser)) {\r\n      throw new Error(`Missing or wrong serialized data: '${ser}' must be a string and not a: '${typeof ser}'.`)\r\n    }\r\n    // deserialize standard attributes, always in JSON format\r\n    const parsed = JSON.parse(ser)\r\n    // ensure it's an object (single), and not a string neither a collection or an array\r\n    if (!V.isObject(parsed) || V.isArray(parsed)) {\r\n      throw new Error(`Wrong deserialized data: '${ser}' must represent an object and not an array or a string or other.`)\r\n    }\r\n\r\n    // fill a new CludEvent instance with parsed data\r\n    const ce = new CloudEvent(parsed.eventID,\r\n      parsed.eventType,\r\n      parsed.source,\r\n      parsed.data,\r\n      { // options\r\n        eventTypeVersion: parsed.eventTypeVersion,\r\n        eventTime: T.timestampFromString(parsed.eventTime),\r\n        extensions: parsed.extensions,\r\n        contentType: parsed.contentType,\r\n        schemaURL: parsed.schemaURL,\r\n        strict: parsed.strict\r\n      }\r\n    )\r\n    // depending on the contentType, decode the data attribute (the payload)\r\n    if (parsed.contentType === CloudEvent.contentTypeDefault()) {\r\n      return ce\r\n    }\r\n    // else\r\n    if (V.isDefinedAndNotNull(decoder)) {\r\n      if (!V.isFunction(decoder)) {\r\n        throw new Error(`Missing or wrong decoder function: '${decoder}' for the given content type: '${parsed.contentType}'.`)\r\n      }\r\n      decodedData = decoder(parsed.data)\r\n    } else {\r\n      // decoder not defined, check decodedData\r\n      if (!V.isDefinedAndNotNull(decodedData)) {\r\n        throw new Error(`Missing decoder function: use decoder function or already decoded data with the given content type: '${parsed.contentType}'.`)\r\n      }\r\n    }\r\n    if (!V.isObject(decodedData)) {\r\n      throw new Error(`Missing or wrong decoded data: '${decodedData}' for the given content type: '${parsed.contentType}'.`)\r\n    }\r\n    // overwrite data with decodedData before returning it\r\n    ce.data = decodedData\r\n    return ce\r\n  }\r\n\r\n  /**\r\n   * Get the JSON Schema for a CloudEvent.\r\n   * Note that it's not used in standard serialization to JSON,\r\n   * but only in some serialization libraries.\r\n   *\r\n   * See JSON Schema.\r\n   *\r\n   * @return {object} the JSON Schema\r\n   */\r\n  static getJSONSchema () {\r\n    // define a schema for serializing a CloudEvent object to JSON\r\n    // note that properties not in the schema will be ignored\r\n    // (in json output) by some json serialization libraries, if additionalProperties is false\r\n    return {\r\n      title: 'CloudEvent Schema with required fields',\r\n      type: 'object',\r\n      properties: {\r\n        cloudEventsVersion: { type: 'string' },\r\n        eventID: { type: 'string' },\r\n        eventType: { type: 'string' },\r\n        // data: { type: 'object' },\r\n        eventTypeVersion: { type: 'string' },\r\n        source: { type: 'string' },\r\n        eventTime: { type: 'string' },\r\n        // extensions: { type: 'object' },\r\n        contentType: { type: 'string' },\r\n        schemaURL: { type: 'string' }\r\n      },\r\n      required: ['cloudEventsVersion', 'eventID', 'eventType',\r\n        'source', 'contentType'\r\n      ],\r\n      additionalProperties: true // to handle data, extensions, and maybe other (non-standard) properties\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Serialize the current CloudEvent.\r\n   *\r\n   * See {@link CloudEvent.serializeEvent}.\r\n   *\r\n   * @param {object} options optional serialization attributes:\r\n   *        encoder (function, default null) a function that takes data and returns encoded data,\r\n   *        encodedData (string, default null) already encoded data (but consistency with the contentType is not checked),\r\n   * @return {string} the serialized event, as a string\r\n   */\r\n  serialize ({ encoder, encodedData } = {}) {\r\n    return this.constructor.serializeEvent(this, { encoder, encodedData })\r\n  }\r\n\r\n  /**\r\n   * Validate the current CloudEvent.\r\n   *\r\n   * See {@link CloudEvent.validateEvent}.\r\n   *\r\n   * @param {object} options containing: strict (boolean, default false) to validate it in a more strict way\r\n   * @return {object[]} an array of (non null) validation errors, or at least an empty array\r\n   */\r\n  validate ({ strict = false } = {}) {\r\n    return this.constructor.validateEvent(this, { strict })\r\n  }\r\n\r\n  /**\r\n   * Tell the current CloudEvent, if it's valid.\r\n   *\r\n   * See {@link CloudEvent.isValidEvent}.\r\n   *\r\n   * @param {object} options containing: strict (boolean, default false) to validate it in a more strict way\r\n   * @return {boolean} true if valid, otherwise false\r\n   */\r\n  isValid ({ strict = false } = {}) {\r\n    return this.constructor.isValidEvent(this, { strict })\r\n  }\r\n\r\n  /**\r\n   * Getter method to tell if the object has the strict flag enabled.\r\n   *\r\n   * See {@link CloudEvent.isStrictEvent}.\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  get isStrict () {\r\n    return this.constructor.isStrictEvent(this)\r\n  }\r\n\r\n  /**\r\n   * Getter method to return JSON Schema for a CloudEvent.\r\n   *\r\n   * See {@link CloudEvent.getJSONSchema}.\r\n   *\r\n   * @type {object}\r\n   */\r\n  get schema () {\r\n    return this.constructor.getJSONSchema()\r\n  }\r\n\r\n  /**\r\n   * Getter method to return a copy of CloudEvent data attribute,\r\n   * or original data payload.\r\n   *\r\n   * See {@link CloudEvent.data}.\r\n   *\r\n   * @type {(object|Map|Set)}\r\n   */\r\n  get payload () {\r\n    return { ...this.data }\r\n  }\r\n\r\n  /**\r\n   * Override the usual toString method.\r\n   *\r\n   * See {@link Object.toString}.\r\n   *\r\n   * @return {string} a string representation for object instance\r\n   */\r\n  toString () {\r\n    return `CloudEvent[cloudEventsVersion: ${this.cloudEventsVersion}, ${T.dumpObject(this.eventID, 'eventID')}, ${T.dumpObject(this.eventType, 'eventType')}, ${T.dumpObject(this.data, 'data')}, ...]`\r\n  }\r\n\r\n  /**\r\n   * Gives a string valued property that is used in the creation of the default string description of an object.\r\n   *\r\n   * See {@link Symbol.toStringTag}.\r\n   *\r\n   * @return {string} a string representation of the object type\r\n   */\r\n  get [Symbol.toStringTag] () {\r\n    return 'CloudEvent'\r\n  }\r\n}\r\n\r\nmodule.exports = CloudEvent\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/src/cloudevent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "CloudEvent",
    "memberof": "src/cloudevent.js",
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent",
    "access": "public",
    "export": true,
    "importPath": "cloudevent/src/cloudevent.js",
    "importStyle": "CloudEvent",
    "description": "CloudEvent implementation.",
    "see": [
      "https://github.com/cloudevents/spec/blob/master/json-format.md"
    ],
    "lineNumber": 42,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#constructor",
    "access": "public",
    "description": "Create a new instance of a CloudEvent object.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventID",
        "description": "the ID of the event (unique), mandatory"
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventType",
        "description": "the type of the event (usually), mandatory"
      },
      {
        "nullable": false,
        "types": [
          "uri"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "the source uri of the event (use '/' if empty), mandatory"
      },
      {
        "nullable": null,
        "types": [
          "object",
          "Map",
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the real event data"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "optional attributes of the event; some has default values chosen here:\n       eventTypeVersion (string) optional,\n       eventTime (timestamp, default now),\n       extensions (object) optional but if given must contain at least 1 property (key/value),\n       contentType (string, default 'application/json') tell how the data attribute must be encoded,\n       schemaURL (uri) optional,\n       strict (boolean, default false) tell if object instance will be validated in a more strict way"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if strict is true and eventID or eventType is undefined or null"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "eventID",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#eventID",
    "access": "private",
    "description": "The event ID.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "eventType",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#eventType",
    "access": "private",
    "description": "The event type.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "source",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#source",
    "access": "private",
    "description": "The source URI of the event.",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "uri"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "data",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#data",
    "access": "private",
    "description": "The real event data.\nUsually it's an object, but could be even a Map or a Set.\nCopy the original object to avoid changing objects that could be shared.",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "object",
        "Map",
        "Set"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "cloudEventsVersion",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#cloudEventsVersion",
    "access": "private",
    "description": "The CloudEvent specification version.",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "contentType",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#contentType",
    "access": "private",
    "description": "The MIME Type for the encoding of the data attribute, when serialized.",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "eventTime",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#eventTime",
    "access": "private",
    "description": "The event timestamp.\nCopy the original object to avoid changing objects that could be shared.",
    "lineNumber": 121,
    "type": {
      "nullable": null,
      "types": [
        "timestamp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "eventTypeVersion",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#eventTypeVersion",
    "access": "private",
    "description": "The event version.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "extensions",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#extensions",
    "access": "private",
    "description": "Extensions defined for the event.\nCopy the original object to avoid changing objects that could be shared.",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "schemaURL",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#schemaURL",
    "access": "private",
    "description": "The URL of schema for the event, if any.",
    "lineNumber": 140,
    "type": {
      "nullable": null,
      "types": [
        "uri"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "version",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.version",
    "access": "public",
    "description": "Return the version of the CloudEvent Specification implemented here",
    "lineNumber": 155,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the value"
    },
    "params": []
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "contentTypeDefault",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.contentTypeDefault",
    "access": "public",
    "description": "Return the default content Type for a CloudEvent",
    "lineNumber": 165,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the value"
    },
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "mediaType",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.mediaType",
    "access": "public",
    "description": "Return the MIME Type for a CloudEvent",
    "lineNumber": 175,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the value"
    },
    "params": []
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "isStrictEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.isStrictEvent",
    "access": "public",
    "description": "Tell if the object has the strict flag enabled.",
    "lineNumber": 188,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the CloudEvent to validate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if strict, otherwise false"
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "if event is not a CloudEvent instance or subclass"
      },
      {
        "types": [
          "Error"
        ],
        "description": "if event is undefined or null"
      }
    ]
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "validateEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.validateEvent",
    "access": "public",
    "description": "Validate the given CloudEvent.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the CloudEvent to validate"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "containing: strict (boolean, default false) to validate it in a more strict way"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "an array of (non null) validation errors, or at least an empty array"
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "isValidEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.isValidEvent",
    "access": "public",
    "description": "Tell the given CloudEvent, if it's valid.\n\nSee {@link CloudEvent.validateEvent}.",
    "lineNumber": 263,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the CloudEvent to validate"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "containing: strict (boolean, default false) to validate it in a more strict way"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if valid, otherwise false"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "isCloudEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.isCloudEvent",
    "access": "public",
    "description": "Tell the given CloudEvent, if it's instance of the CloudEvent class or a subclass of it.",
    "lineNumber": 276,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the CloudEvent to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an instance (or a subclass), otherwise false"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "serializeEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.serializeEvent",
    "access": "public",
    "description": "Serialize the given CloudEvent in JSON format.\nNote that here standard serialization to JSON is used (no additional libraries).\nNote that the result of encoder function is assigned to encoded data.",
    "lineNumber": 295,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the CloudEvent to serialize"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "optional serialization attributes:\n       encoder (function, no default) a function that takes data and returns encoded data,\n       encodedData (string, no default) already encoded data (but consistency with the contentType is not checked),"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the serialized event, as a string"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if event is undefined or null, or an option is undefined/null/wrong"
      }
    ]
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "deserializeEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.deserializeEvent",
    "access": "public",
    "description": "Deserialize/parse the given CloudEvent from JSON format.\nNote that here standard parse from JSON is used (no additional libraries).\nNote that the result of decoder function is assigned to decoded data.",
    "lineNumber": 333,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ser",
        "description": "the serialized CloudEvent to parse/deserialize"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "optional deserialization attributes:\n       decoder (function, no default) a function that takes data and returns decoder data,\n       decodedData (object, no default) already decoded data (but consistency with the contentType is not checked),"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the deserialized event as a CloudEvent instance"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if event is undefined or null, or an option is undefined/null/wrong"
      },
      {
        "types": [
          "Error"
        ],
        "description": "in case of JSON parsing error"
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getJSONSchema",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.getJSONSchema",
    "access": "public",
    "description": "Get the JSON Schema for a CloudEvent.\nNote that it's not used in standard serialization to JSON,\nbut only in some serialization libraries.\n\nSee JSON Schema.",
    "lineNumber": 394,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the JSON Schema"
    },
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#serialize",
    "access": "public",
    "description": "Serialize the current CloudEvent.\n\nSee {@link CloudEvent.serializeEvent}.",
    "lineNumber": 430,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "optional serialization attributes:\n       encoder (function, default null) a function that takes data and returns encoded data,\n       encodedData (string, default null) already encoded data (but consistency with the contentType is not checked),"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the serialized event, as a string"
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "validate",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#validate",
    "access": "public",
    "description": "Validate the current CloudEvent.\n\nSee {@link CloudEvent.validateEvent}.",
    "lineNumber": 442,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "containing: strict (boolean, default false) to validate it in a more strict way"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "an array of (non null) validation errors, or at least an empty array"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "isValid",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#isValid",
    "access": "public",
    "description": "Tell the current CloudEvent, if it's valid.\n\nSee {@link CloudEvent.isValidEvent}.",
    "lineNumber": 454,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "containing: strict (boolean, default false) to validate it in a more strict way"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if valid, otherwise false"
    }
  },
  {
    "__docId__": 76,
    "kind": "get",
    "name": "isStrict",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#isStrict",
    "access": "public",
    "description": "Getter method to tell if the object has the strict flag enabled.\n\nSee {@link CloudEvent.isStrictEvent}.",
    "lineNumber": 465,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "get",
    "name": "schema",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#schema",
    "access": "public",
    "description": "Getter method to return JSON Schema for a CloudEvent.\n\nSee {@link CloudEvent.getJSONSchema}.",
    "lineNumber": 476,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "get",
    "name": "payload",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#payload",
    "access": "public",
    "description": "Getter method to return a copy of CloudEvent data attribute,\nor original data payload.\n\nSee {@link CloudEvent.data}.",
    "lineNumber": 488,
    "type": {
      "nullable": null,
      "types": [
        "object",
        "Map",
        "Set"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "toString",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#toString",
    "access": "public",
    "description": "Override the usual toString method.\n\nSee {@link Object.toString}.",
    "lineNumber": 499,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a string representation for object instance"
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "get",
    "name": "[Symbol.toStringTag]",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#[Symbol.toStringTag]",
    "access": "public",
    "description": "Gives a string valued property that is used in the creation of the default string description of an object.\n\nSee {@link Symbol.toStringTag}.",
    "lineNumber": 510,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a string representation of the object type"
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/index.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\n/**\r\n * Get a reference to CloudEvent class definition.\r\n *\r\n * See {@link CloudEvent}.\r\n */\r\nconst cloudEventDefinition = require('./cloudevent')\r\n\r\n/**\r\n * Get a reference to cloudevent class Validator.\r\n *\r\n * See {@link Validator}.\r\n */\r\nconst cloudEventValidator = require('./validator')\r\n\r\n/**\r\n * Get a reference to cloudevent class Transformer.\r\n *\r\n * See {@link Transformer}.\r\n */\r\nconst cloudEventTransformer = require('./transformer')\r\n\r\nmodule.exports = {\r\n  CloudEvent: cloudEventDefinition,\r\n  CloudEventValidator: cloudEventValidator,\r\n  CloudEventTransformer: cloudEventTransformer\r\n}\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/transformer.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\n/**\r\n * Transformers:\r\n * this module exports some useful generic functions for the transformation of objects.\r\n */\r\n\r\n/**\r\n * Get a reference to cloudevent Validator class.\r\n *\r\n * See {@link Validator}.\r\n */\r\nconst V = require('./validator') // get validator from here\r\n\r\n/** Get the host name where this code is runninng */\r\nconst hostname = require('os').hostname()\r\n\r\n/** Get the process id (pid) where this code is runninng */\r\nconst pid = require('process').pid\r\n\r\n/**\r\n * Useful Transformations for CloudEvent objects.\r\n *\r\n * Note that all methods here are static, so no need to instance this class;\r\n * see it as an Utility/Companion class.\r\n */\r\nclass Transformer {\r\n  /**\r\n   * Create a new instance of a Transformer object.\r\n   *\r\n   * Note that instancing is not allowed for this class because all its methods are static.\r\n   *\r\n   * @throws {Error} because instancing not allowed for this class\r\n   */\r\n  constructor () {\r\n    throw new Error(`Instancing not allowed for this class`)\r\n  }\r\n\r\n  /**\r\n   * Gives a string valued property that is used in the creation of the default string description of an object.\r\n   *\r\n   * See {@link Symbol.toStringTag}.\r\n   *\r\n   * @return {string} a string representation of the object type\r\n   */\r\n  get [Symbol.toStringTag] () {\r\n    return 'Transformer'\r\n  }\r\n\r\n  /**\r\n   * Utility function that return a dump of the given object.\r\n   *\r\n   * @static\r\n   * @param {(object|Map|Set)} obj the object to dump\r\n   * @param {string} name the name to assign in the returned string\r\n   * @return {string} the dump of the object or a message when obj is undefined/null/not an object\r\n   */\r\n  static dumpObject (obj, name) {\r\n    const n = name || 'noname'\r\n    if (V.isUndefined(obj)) {\r\n      return `${n}: undefined`\r\n    } else if (V.isNull(obj)) {\r\n      return `${n}: null`\r\n    } else if (!V.isObjectOrCollection(obj)) {\r\n      return `${n}: '${obj.toString()}'`\r\n    } else {\r\n      return `${n}: ${JSON.stringify(obj)}`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility function that returns the timezone offset value, in msec.\r\n   *\r\n   * @static\r\n   * @return {number} the timezone offset, in msec\r\n   */\r\n  static get timezoneOffsetMsec () {\r\n    return new Date().getTimezoneOffset() * 60 * 1000\r\n  }\r\n\r\n  /**\r\n   * Utility function that parse a string representation\r\n   * (compatible with the CloudEvent standard) of the given timestamp (Date)\r\n   * and returns it (if possible).\r\n   *\r\n   * Note that the value returned has already been adjusted with the current timezone offset.\r\n   *\r\n   * @static\r\n   * @param {!string} obj the timestamp/date to parse (as a string)\r\n   * @return {object} the parsed version, as a timestamp (Date) object, if possible\r\n   * @throws {Error} if obj is undefined or null, or is not a string\r\n   */\r\n  static timestampFromString (obj) {\r\n    if (!V.isStringNotEmpty(obj)) {\r\n      throw new Error(`Missing or wrong timestamp: '${obj}' must be a string and not a: '${typeof obj}'.`)\r\n    }\r\n    const timestampMsec = Date.parse(obj)\r\n    return new Date(timestampMsec + Transformer.timezoneOffsetMsec)\r\n  }\r\n\r\n  /**\r\n   * Utility function that return a string representation\r\n   * (compatible with the CloudEvent standard) of the given timestamp (Date).\r\n   *\r\n   * Note that the value returned is in the UTC format.\r\n   *\r\n   * @static\r\n   * @param {!object} obj the timestamp/date to convert\r\n   * @return {string} the string representation of the object\r\n   * @throws {Error} if obj is undefined or null, or is not a Date instance\r\n   */\r\n  static timestampToString (obj) {\r\n    if (!V.isDateValid(obj)) {\r\n      throw new Error(`Missing or wrong timestamp: '${obj}' must be a date and not a: '${typeof obj}'.`)\r\n    }\r\n    return obj.toISOString()\r\n  }\r\n\r\n  /**\r\n   * Utility function that map an Error into an object\r\n   * (compatible with the CloudEvent standard), to fill its 'data' attribute.\r\n   *\r\n   * @static\r\n   * @param {!Error} err the Error to transform\r\n   * @param {object} options transformation options:\r\n   *        includeStackTrace flag (default false) to add the StackTrace into the object to return,\r\n   *        addStatus flag (default true) to add a 'status' attribute into the object to return,\r\n   *        addTimestamp flag (default false) to add the current 'timestamp' as attribute into the object to return,\r\n   * @return {object} the object representation of the error\r\n   * @throws {Error} if err is undefined or null, or is not an Error instance\r\n   */\r\n  static errorToData (err, {\r\n    includeStackTrace = false,\r\n    addStatus = true,\r\n    addTimestamp = false\r\n  } = {}\r\n  ) {\r\n    if (!V.isError(err)) {\r\n      throw new Error(`Missing or wrong argument: '${err}' must be an Error and not a: '${typeof err}'.`)\r\n    }\r\n    const data = {\r\n      name: err.name,\r\n      message: err.message,\r\n      stack: (includeStackTrace === true) ? err.stack : null\r\n    }\r\n    if (V.isDefinedAndNotNull(err.code)) {\r\n      data.code = err.code\r\n    }\r\n    if (addStatus === true) {\r\n      data.status = 'error'\r\n    }\r\n    if (addTimestamp === true) {\r\n      data.timestamp = Date.now()\r\n    }\r\n    return data\r\n  }\r\n\r\n  /**\r\n   * Utility function that get some process-related info and wrap into an object\r\n   * (compatible with the CloudEvent standard), to fill its 'data' attribute.\r\n   *\r\n   * @static\r\n   * @return {object} the object representation of process-related info data\r\n   */\r\n  static processInfoToData () {\r\n    return {\r\n      hostname: hostname,\r\n      pid: pid\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Transformer\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/src/transformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "Transformer",
    "memberof": "src/transformer.js",
    "static": true,
    "longname": "src/transformer.js~Transformer",
    "access": "public",
    "export": true,
    "importPath": "cloudevent/src/transformer.js",
    "importStyle": "Transformer",
    "description": "Useful Transformations for CloudEvent objects.\n\nNote that all methods here are static, so no need to instance this class;\nsee it as an Utility/Companion class.",
    "lineNumber": 42,
    "interface": false
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transformer.js~Transformer#constructor",
    "access": "public",
    "description": "Create a new instance of a Transformer object.\n\nNote that instancing is not allowed for this class because all its methods are static.",
    "lineNumber": 50,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "because instancing not allowed for this class"
      }
    ]
  },
  {
    "__docId__": 85,
    "kind": "get",
    "name": "[Symbol.toStringTag]",
    "memberof": "src/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transformer.js~Transformer#[Symbol.toStringTag]",
    "access": "public",
    "description": "Gives a string valued property that is used in the creation of the default string description of an object.\n\nSee {@link Symbol.toStringTag}.",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a string representation of the object type"
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "dumpObject",
    "memberof": "src/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transformer.js~Transformer.dumpObject",
    "access": "public",
    "description": "Utility function that return a dump of the given object.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "Map",
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to dump"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to assign in the returned string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the dump of the object or a message when obj is undefined/null/not an object"
    }
  },
  {
    "__docId__": 87,
    "kind": "get",
    "name": "timezoneOffsetMsec",
    "memberof": "src/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transformer.js~Transformer.timezoneOffsetMsec",
    "access": "public",
    "description": "Utility function that returns the timezone offset value, in msec.",
    "lineNumber": 92,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the timezone offset, in msec"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "timestampFromString",
    "memberof": "src/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transformer.js~Transformer.timestampFromString",
    "access": "public",
    "description": "Utility function that parse a string representation\n(compatible with the CloudEvent standard) of the given timestamp (Date)\nand returns it (if possible).\n\nNote that the value returned has already been adjusted with the current timezone offset.",
    "lineNumber": 108,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the timestamp/date to parse (as a string)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the parsed version, as a timestamp (Date) object, if possible"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if obj is undefined or null, or is not a string"
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "timestampToString",
    "memberof": "src/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transformer.js~Transformer.timestampToString",
    "access": "public",
    "description": "Utility function that return a string representation\n(compatible with the CloudEvent standard) of the given timestamp (Date).\n\nNote that the value returned is in the UTC format.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the timestamp/date to convert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the string representation of the object"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if obj is undefined or null, or is not a Date instance"
      }
    ]
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "errorToData",
    "memberof": "src/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transformer.js~Transformer.errorToData",
    "access": "public",
    "description": "Utility function that map an Error into an object\n(compatible with the CloudEvent standard), to fill its 'data' attribute.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": false,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "the Error to transform"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "transformation options:\n       includeStackTrace flag (default false) to add the StackTrace into the object to return,\n       addStatus flag (default true) to add a 'status' attribute into the object to return,\n       addTimestamp flag (default false) to add the current 'timestamp' as attribute into the object to return,"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the object representation of the error"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if err is undefined or null, or is not an Error instance"
      }
    ]
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "processInfoToData",
    "memberof": "src/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transformer.js~Transformer.processInfoToData",
    "access": "public",
    "description": "Utility function that get some process-related info and wrap into an object\n(compatible with the CloudEvent standard), to fill its 'data' attribute.",
    "lineNumber": 180,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the object representation of process-related info data"
    },
    "params": []
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/validator.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\n/**\r\n * Validators:\r\n * this module exports some useful generic functions for the validation of objects.\r\n */\r\n\r\nconst url = require('url')\r\n\r\n/**\r\n * Generic Validator implementation.\r\n *\r\n * Note that all methods here are static, so no need to instance this class;\r\n * see it as an Utility/Companion class.\r\n */\r\nclass Validator {\r\n  /**\r\n   * Create a new instance of a Validator object.\r\n   *\r\n   * Note that instancing is not allowed for this class because all its methods are static.\r\n   *\r\n   * @throws {Error} because instancing not allowed for this class\r\n   */\r\n  constructor () {\r\n    throw new Error(`Instancing not allowed for this class`)\r\n  }\r\n\r\n  /**\r\n   * Gives a string valued property that is used in the creation of the default string description of an object.\r\n   *\r\n   * See {@link Symbol.toStringTag}.\r\n   *\r\n   * @return {string} a string representation of the object type\r\n   */\r\n  get [Symbol.toStringTag] () {\r\n    return 'Validator'\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is undefined.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if undefined, false otherwise\r\n   */\r\n  static isUndefined (arg) {\r\n    return (arg === undefined)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is null.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if null, false otherwise\r\n   */\r\n  static isNull (arg) {\r\n    return (arg === null)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is undefined or null.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if undefined or null, false otherwise\r\n   */\r\n  static isUndefinedOrNull (arg) {\r\n    return (arg === undefined || arg === null)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is defined and not null.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if defined and not null, false otherwise\r\n   */\r\n  static isDefinedAndNotNull (arg) {\r\n    return (arg !== undefined && arg !== null)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a string.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a string, false otherwise\r\n   */\r\n  static isString (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (typeof arg === 'string'))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a not empty string.\r\n   *\r\n   * See {@link Validator.isString}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a not empty string, false otherwise\r\n   */\r\n  static isStringNotEmpty (arg) {\r\n    return (Validator.isString(arg) && (arg.length > 0))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a date.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a date, false otherwise\r\n   */\r\n  static isDate (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (typeof arg === 'object' || arg instanceof Date))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a valid date.\r\n   *\r\n   * See {@link Validator.isDate}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a valid date, false otherwise\r\n   */\r\n  static isDateValid (arg) {\r\n    return (Validator.isDate(arg) && !isNaN(arg))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a valid date and in the past or now.\r\n   *\r\n   * See {@link Validator.isDateValid}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a valid date in the past (or now), false otherwise\r\n   */\r\n  static isDatePast (arg) {\r\n    return (Validator.isDateValid(arg) && arg <= Date.now())\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a valid date and in the future or now.\r\n   *\r\n   * See {@link Validator.isDateValid}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a valid date in the future (or now), false otherwise\r\n   */\r\n  static isDateFuture (arg) {\r\n    return (Validator.isDateValid(arg) && arg >= Date.now())\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a number.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a number, false otherwise\r\n   */\r\n  static isNumber (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && typeof arg === 'number' && !isNaN(arg))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is an array.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's an array, false otherwise\r\n   */\r\n  static isArray (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (Array.isArray(arg)))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a boolean.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a boolean, false otherwise\r\n   */\r\n  static isBoolean (arg) {\r\n    return (typeof arg === 'boolean')\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is an instance of the given class reference.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {object} classReference the class that should be implemented/extended\r\n   * @return {boolean} true if it's an instance (or extends) that class, false otherwise\r\n   */\r\n  static isClass (arg, classReference) {\r\n    return (arg instanceof classReference)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is an error.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's an error, false otherwise\r\n   */\r\n  static isError (arg) {\r\n    return (arg instanceof Error && typeof arg.message !== 'undefined')\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a function.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a function, false otherwise\r\n   */\r\n  static isFunction (arg) {\r\n    return (typeof arg === 'function')\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is an object.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's an object, false otherwise\r\n   */\r\n  static isObject (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (typeof arg === 'object'))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a keyed collection.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a Map|WeakMap or a Set|WeakSet, false otherwise\r\n   */\r\n  static isKeyedCollection (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (\r\n      arg instanceof Map || arg instanceof WeakMap ||\r\n      arg instanceof Set || arg instanceof WeakSet\r\n    ))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is an object or a keyed collection.\r\n   *\r\n   * See {@link Validator.isObject}, {@link Validator.isKeyedCollection}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's an object or a keyed collection, false otherwise\r\n   */\r\n  static isObjectOrCollection (arg) {\r\n    return (Validator.isObject(arg) || Validator.isKeyedCollection(arg))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is an object or a keyed collection, but not a string.\r\n   *\r\n   * See {@link Validator.isObjectOrCollection}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's an object or a keyed collection but not a string, false otherwise\r\n   */\r\n  static isObjectOrCollectionNotString (arg) {\r\n    return (Validator.isObjectOrCollection(arg) && (typeof arg !== 'string'))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is a string representation of a version number.\r\n   *\r\n   * Note that the version string could be something like:\r\n   * - as minimum a number is needed for an integer version\r\n   * - at the beginning I can have an optional char 'v' or 'V'\r\n   * - anything after the third number will be considered as a string\r\n   * - format updated to handle version output of 'git describe'\r\n   *\r\n   * @static\r\n   * @param {string} arg the version string to check\r\n   * @return {boolean} true if it's a version string, false otherwise\r\n   */\r\n  static isVersion (arg) {\r\n    // quick check if the given string is in the format 'n.n.n'\r\n    const versionRegex = /^(?:v|V?)((\\d+)(?:\\.?)){1,3}(?:\\W|_?)(.*)$/gm\r\n    return (Validator.isStringNotEmpty(arg) && versionRegex.test(arg))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given argument is an URI or an URL.\r\n   *\r\n   * @static\r\n   * @param {string} arg the uri/url to check\r\n   * @param {string} base the (optional) base to build the full URL\r\n   * @return {boolean} true if it's an URI/URL, false otherwise\r\n   */\r\n  static isURI (arg, base) {\r\n    // quick check if the given string is an URI or an URL\r\n    if (!Validator.isStringNotEmpty(arg)) {\r\n      return false\r\n    }\r\n    // simple check if it's an URL, trying to instancing it\r\n    // note that this requires to import related module here (but not in Browsers) ...\r\n    if (Validator.isStringNotEmpty(base)) {\r\n      try {\r\n        const u = new url.URL(arg, base)\r\n        return (u !== null)\r\n      } catch (e) {\r\n        // console.error(e)\r\n        return false\r\n      }\r\n    } else {\r\n      // simple check if it's an URI (or better, a relative URL)\r\n      if (arg.startsWith('/')) {\r\n        return true\r\n      }\r\n      try {\r\n        // return (new URL(arg) !== null)\r\n        const u = new url.URL(arg)\r\n        return (u !== null)\r\n      } catch (e) {\r\n        // console.error(e)\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument is undefined.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not undefined, nothing otherwise\r\n   */\r\n  static ensureIsUndefined (arg, name) {\r\n    if (!Validator.isUndefined(arg)) {\r\n      return new TypeError(`The argument '${name}' must be undefined, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument is null.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not null, nothing otherwise\r\n   */\r\n  static ensureIsNull (arg, name) {\r\n    if (!Validator.isNull(arg)) {\r\n      return new TypeError(`The argument '${name}' must be null, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument is undefined or null.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not undefined or null, nothing otherwise\r\n   */\r\n  static ensureIsUndefinedOrNull (arg, name) {\r\n    if (!Validator.isUndefinedOrNull(arg)) {\r\n      return new TypeError(`The argument '${name}' must be undefined or null, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument is a boolean.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not a boolean, nothing otherwise\r\n   */\r\n  static ensureIsBoolean (arg, name) {\r\n    if (!Validator.isBoolean(arg)) {\r\n      return new TypeError(`The argument '${name}' must be a boolean, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument is an instance of the given class reference.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {object} classReference the class that should be implemented/extended\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not an instance (or extends) that class, nothing otherwise\r\n   */\r\n  static ensureIsClass (arg, classReference, name) {\r\n    if (!Validator.isClass(arg, classReference)) {\r\n      return new TypeError(`The argument '${name}' must be an instance of the given class reference, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument is a function.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not a function, nothing otherwise\r\n   */\r\n  static ensureIsFunction (arg, name) {\r\n    if (!Validator.isFunction(arg)) {\r\n      return new TypeError(`The argument '${name}' must be a function, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a string.\r\n   *\r\n   * See {@link Validator.isString}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not a string, nothing otherwise\r\n   */\r\n  static ensureIsString (arg, name) {\r\n    if (!Validator.isString(arg)) {\r\n      return new TypeError(`The argument '${name}' must be a string, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a not empty string.\r\n   *\r\n   * See {@link Validator.isStringNotEmpty}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not a not empty string, nothing otherwise\r\n   */\r\n  static ensureIsStringNotEmpty (arg, name) {\r\n    if (!Validator.isStringNotEmpty(arg)) {\r\n      return new Error(`The string '${name}' must be not empty`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia an object or a collection.\r\n   *\r\n   * See {@link Validator.isObjectOrCollection}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not an object nor a collection, nothing otherwise\r\n   */\r\n  static ensureIsObjectOrCollection (arg, name) {\r\n    if (!Validator.isObjectOrCollection(arg)) {\r\n      return new TypeError(`The object '${name}' must be an object or a collection`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia an object or a collection, not a string.\r\n   *\r\n   * See {@link Validator.isObjectOrCollectionNotString}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not an object nor a collection, nothing otherwise\r\n   */\r\n  static ensureIsObjectOrCollectionNotString (arg, name) {\r\n    if (!Validator.isObjectOrCollectionNotString(arg)) {\r\n      return new TypeError(`The object '${name}' must be an object or a collection, and not a string`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a date.\r\n   *\r\n   * See {@link Validator.isDate}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not a date, nothing otherwise\r\n   */\r\n  static ensureIsDate (arg, name) {\r\n    if (!Validator.isDate(arg)) {\r\n      return new Error(`The object '${name}' must be a Date`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a date in the past or now.\r\n   *\r\n   * See {@link Validator.isDatePast}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not a date in the past, nothing otherwise\r\n   */\r\n  static ensureIsDatePast (arg, name) {\r\n    if (!Validator.isDatePast(arg)) {\r\n      return new Error(`The object '${name}' must be a Date that belongs to the past`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a date in the future or now.\r\n   *\r\n   * See {@link Validator.isDateFuture}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not a date in the future, nothing otherwise\r\n   */\r\n  static ensureIsDateFuture (arg, name) {\r\n    if (!Validator.isDateFuture(arg)) {\r\n      return new Error(`The object '${name}' must be a Date that belongs to the future`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument is an error instance or its subclass.\r\n   *\r\n   * See {@link Validator.isError}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not an error or its subclass, nothing otherwise\r\n   */\r\n  static ensureIsError (arg, name) {\r\n    if (!Validator.isError(arg)) {\r\n      return new Error(`The object '${name}' must be an Error or a subclass of it`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a string version.\r\n   *\r\n   * See {@link Validator.isVersion}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not a string version, nothing otherwise\r\n   */\r\n  static ensureIsVersion (arg, name) {\r\n    if (!Validator.isVersion(arg)) {\r\n      return new Error(`The object '${name}' must be a string in the format 'n.n.n', and not '${arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia an URI/URL.\r\n   *\r\n   * See {@link Validator.isURI}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} base the (optional) base to build the full URL\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not an URI/URL, nothing otherwise\r\n   */\r\n  static ensureIsURI (arg, base, name) {\r\n    if (!Validator.isURI(arg, base)) {\r\n      return new Error(`The object '${name}' must be an URI or URL string, and not '${arg}', '${base}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tell the size of the given object\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {number} the size if it's an array|Map|Set|object|string, nothing otherwise\r\n   */\r\n  static getSize (arg) {\r\n    if ((arg === undefined || arg === null)) {\r\n      return\r\n    }\r\n    if (Array.isArray(arg)) {\r\n      return arg.length\r\n    } else if (arg instanceof Map || arg instanceof Set) {\r\n      return arg.size\r\n    } else if (typeof arg === 'object') {\r\n      return Object.keys(arg).length\r\n    } else if (typeof arg === 'string') {\r\n      return arg.length\r\n    }\r\n    // else\r\n    throw new TypeError(`Unable to calculate the size of the argument '${arg}'.`)\r\n  }\r\n}\r\n\r\nmodule.exports = Validator\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/src/validator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "Validator",
    "memberof": "src/validator.js",
    "static": true,
    "longname": "src/validator.js~Validator",
    "access": "public",
    "export": true,
    "importPath": "cloudevent/src/validator.js",
    "importStyle": "Validator",
    "description": "Generic Validator implementation.\n\nNote that all methods here are static, so no need to instance this class;\nsee it as an Utility/Companion class.",
    "lineNumber": 31,
    "interface": false
  },
  {
    "__docId__": 94,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validator.js~Validator#constructor",
    "access": "public",
    "description": "Create a new instance of a Validator object.\n\nNote that instancing is not allowed for this class because all its methods are static.",
    "lineNumber": 39,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "because instancing not allowed for this class"
      }
    ]
  },
  {
    "__docId__": 95,
    "kind": "get",
    "name": "[Symbol.toStringTag]",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validator.js~Validator#[Symbol.toStringTag]",
    "access": "public",
    "description": "Gives a string valued property that is used in the creation of the default string description of an object.\n\nSee {@link Symbol.toStringTag}.",
    "lineNumber": 50,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a string representation of the object type"
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "isUndefined",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isUndefined",
    "access": "public",
    "description": "Tell if the given argument is undefined.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if undefined, false otherwise"
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "isNull",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isNull",
    "access": "public",
    "description": "Tell if the given argument is null.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if null, false otherwise"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "isUndefinedOrNull",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isUndefinedOrNull",
    "access": "public",
    "description": "Tell if the given argument is undefined or null.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if undefined or null, false otherwise"
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "isDefinedAndNotNull",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isDefinedAndNotNull",
    "access": "public",
    "description": "Tell if the given argument is defined and not null.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if defined and not null, false otherwise"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "isString",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isString",
    "access": "public",
    "description": "Tell if the given argument is a string.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a string, false otherwise"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "isStringNotEmpty",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isStringNotEmpty",
    "access": "public",
    "description": "Tell if the given argument is a not empty string.\n\nSee {@link Validator.isString}.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a not empty string, false otherwise"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "isDate",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isDate",
    "access": "public",
    "description": "Tell if the given argument is a date.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a date, false otherwise"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "isDateValid",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isDateValid",
    "access": "public",
    "description": "Tell if the given argument is a valid date.\n\nSee {@link Validator.isDate}.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a valid date, false otherwise"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "isDatePast",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isDatePast",
    "access": "public",
    "description": "Tell if the given argument is a valid date and in the past or now.\n\nSee {@link Validator.isDateValid}.",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a valid date in the past (or now), false otherwise"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "isDateFuture",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isDateFuture",
    "access": "public",
    "description": "Tell if the given argument is a valid date and in the future or now.\n\nSee {@link Validator.isDateValid}.",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a valid date in the future (or now), false otherwise"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "isNumber",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isNumber",
    "access": "public",
    "description": "Tell if the given argument is a number.",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a number, false otherwise"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "isArray",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isArray",
    "access": "public",
    "description": "Tell if the given argument is an array.",
    "lineNumber": 190,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an array, false otherwise"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "isBoolean",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isBoolean",
    "access": "public",
    "description": "Tell if the given argument is a boolean.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a boolean, false otherwise"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "isClass",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isClass",
    "access": "public",
    "description": "Tell if the given argument is an instance of the given class reference.",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "classReference",
        "description": "the class that should be implemented/extended"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an instance (or extends) that class, false otherwise"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "isError",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isError",
    "access": "public",
    "description": "Tell if the given argument is an error.",
    "lineNumber": 224,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an error, false otherwise"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "isFunction",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isFunction",
    "access": "public",
    "description": "Tell if the given argument is a function.",
    "lineNumber": 235,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a function, false otherwise"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "isObject",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isObject",
    "access": "public",
    "description": "Tell if the given argument is an object.",
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an object, false otherwise"
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "isKeyedCollection",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isKeyedCollection",
    "access": "public",
    "description": "Tell if the given argument is a keyed collection.",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a Map|WeakMap or a Set|WeakSet, false otherwise"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "isObjectOrCollection",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isObjectOrCollection",
    "access": "public",
    "description": "Tell if the given argument is an object or a keyed collection.\n\nSee {@link Validator.isObject}, {@link Validator.isKeyedCollection}.",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an object or a keyed collection, false otherwise"
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "isObjectOrCollectionNotString",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isObjectOrCollectionNotString",
    "access": "public",
    "description": "Tell if the given argument is an object or a keyed collection, but not a string.\n\nSee {@link Validator.isObjectOrCollection}.",
    "lineNumber": 286,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an object or a keyed collection but not a string, false otherwise"
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "isVersion",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isVersion",
    "access": "public",
    "description": "Tell if the given argument is a string representation of a version number.\n\nNote that the version string could be something like:\n- as minimum a number is needed for an integer version\n- at the beginning I can have an optional char 'v' or 'V'\n- anything after the third number will be considered as a string\n- format updated to handle version output of 'git describe'",
    "lineNumber": 303,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the version string to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a version string, false otherwise"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "isURI",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isURI",
    "access": "public",
    "description": "Tell if the given argument is an URI or an URL.",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the uri/url to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "the (optional) base to build the full URL"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an URI/URL, false otherwise"
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "ensureIsUndefined",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsUndefined",
    "access": "public",
    "description": "Ensure that the given argument is undefined.",
    "lineNumber": 356,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not undefined, nothing otherwise"
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "ensureIsNull",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsNull",
    "access": "public",
    "description": "Ensure that the given argument is null.",
    "lineNumber": 370,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not null, nothing otherwise"
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "ensureIsUndefinedOrNull",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsUndefinedOrNull",
    "access": "public",
    "description": "Ensure that the given argument is undefined or null.",
    "lineNumber": 384,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not undefined or null, nothing otherwise"
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "ensureIsBoolean",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsBoolean",
    "access": "public",
    "description": "Ensure that the given argument is a boolean.",
    "lineNumber": 398,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not a boolean, nothing otherwise"
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "ensureIsClass",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsClass",
    "access": "public",
    "description": "Ensure that the given argument is an instance of the given class reference.",
    "lineNumber": 413,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "classReference",
        "description": "the class that should be implemented/extended"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not an instance (or extends) that class, nothing otherwise"
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "ensureIsFunction",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsFunction",
    "access": "public",
    "description": "Ensure that the given argument is a function.",
    "lineNumber": 427,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not a function, nothing otherwise"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "ensureIsString",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsString",
    "access": "public",
    "description": "Ensure that the given argument ia a string.\n\nSee {@link Validator.isString}.",
    "lineNumber": 443,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not a string, nothing otherwise"
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "ensureIsStringNotEmpty",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsStringNotEmpty",
    "access": "public",
    "description": "Ensure that the given argument ia a not empty string.\n\nSee {@link Validator.isStringNotEmpty}.",
    "lineNumber": 459,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not a not empty string, nothing otherwise"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "ensureIsObjectOrCollection",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsObjectOrCollection",
    "access": "public",
    "description": "Ensure that the given argument ia an object or a collection.\n\nSee {@link Validator.isObjectOrCollection}.",
    "lineNumber": 475,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not an object nor a collection, nothing otherwise"
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "ensureIsObjectOrCollectionNotString",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsObjectOrCollectionNotString",
    "access": "public",
    "description": "Ensure that the given argument ia an object or a collection, not a string.\n\nSee {@link Validator.isObjectOrCollectionNotString}.",
    "lineNumber": 491,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not an object nor a collection, nothing otherwise"
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "ensureIsDate",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsDate",
    "access": "public",
    "description": "Ensure that the given argument ia a date.\n\nSee {@link Validator.isDate}.",
    "lineNumber": 507,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not a date, nothing otherwise"
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "ensureIsDatePast",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsDatePast",
    "access": "public",
    "description": "Ensure that the given argument ia a date in the past or now.\n\nSee {@link Validator.isDatePast}.",
    "lineNumber": 523,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not a date in the past, nothing otherwise"
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "ensureIsDateFuture",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsDateFuture",
    "access": "public",
    "description": "Ensure that the given argument ia a date in the future or now.\n\nSee {@link Validator.isDateFuture}.",
    "lineNumber": 539,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not a date in the future, nothing otherwise"
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "ensureIsError",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsError",
    "access": "public",
    "description": "Ensure that the given argument is an error instance or its subclass.\n\nSee {@link Validator.isError}.",
    "lineNumber": 555,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not an error or its subclass, nothing otherwise"
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "ensureIsVersion",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsVersion",
    "access": "public",
    "description": "Ensure that the given argument ia a string version.\n\nSee {@link Validator.isVersion}.",
    "lineNumber": 571,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not a string version, nothing otherwise"
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "ensureIsURI",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsURI",
    "access": "public",
    "description": "Ensure that the given argument ia an URI/URL.\n\nSee {@link Validator.isURI}.",
    "lineNumber": 588,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "the (optional) base to build the full URL"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not an URI/URL, nothing otherwise"
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "getSize",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.getSize",
    "access": "public",
    "description": "Tell the size of the given object",
    "lineNumber": 601,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the size if it's an array|Map|Set|object|string, nothing otherwise"
    }
  },
  {
    "kind": "index",
    "content": "# cloudevent / cloudevent.js\n\n  [![NPM Version](https://img.shields.io/npm/v/cloudevent.svg?style=flat)](https://npmjs.org/package/cloudevent/)\n  [![NPM Downloads](https://img.shields.io/npm/dm/cloudevent.svg?style=flat)](https://npmjs.org/package/cloudevent/)\n  [![Code Style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/)\n  [![Coverage Status](https://coveralls.io/repos/github/smartiniOnGitHub/cloudevent.js/badge.svg?branch=master)](https://coveralls.io/github/smartiniOnGitHub/cloudevent.js/?branch=master)\n  [![dependencies Status](https://david-dm.org/smartiniOnGitHub/cloudevent.js/status.svg)](https://david-dm.org/smartiniOnGitHub/cloudevent.js)\n  [![devDependencies Status](https://david-dm.org/smartiniOnGitHub/cloudevent.js/dev-status.svg)](https://david-dm.org/smartiniOnGitHub/cloudevent.js?type=dev)\n\nJavaScript/Node.js implementation of [CloudEvents](http://cloudevents.io/)\n\nThe purpose of this library is to create instances of CloudEvents in a simple way \n(with some useful defaults), or in a full way (all attributes).\nOptional, it's possible to validate created instances to be sure they are compliant with the standard.\n\nThen, created instances can be serialized, for example to be sent (or saved/stored) somewhere.\n\nNote that many features are exposed directly by the CloudEvent class with standard class instance \nmethods, and even as class static methods (that operates on a given CloudEvent).\nAnyway, to be more future-proof the library now exports a main object, with all features inside \n(the class for CloudEvent, its Validator class as CloudEventValidator, etc); \nusing destructuring assignment (as seen in code samples) usage will be easier.\n\n\n## Usage\n\nGet a reference to the library:\n\n```js\n// Node.js example\n\n// reference the library, not needed if using destructuring assignment, see below\nconst CloudEventExports = require('cloudevent')\n\n// minimal, most common usage\n// const { CloudEvent } = require('cloudevent')\n// other, get more objects exposed by the library\nconst { CloudEvent, CloudEventValidator: V, CloudEventTransformer: T } = require('cloudevent')\nassert(CloudEvent !== null && V !== null && T !== null)\n```\n\ncreate some sample CloudEvent instances:\n\n```js\n// create some sample instances but without mandatory fields (for validation) ...\nconst ceEmpty = new CloudEvent() // create an empty CloudEvent instance (not valid for the validator, even in default case, when strict mode flag is disabled)\nconst ceMinimalMandatoryUndefinedNoStrict = new CloudEvent(undefined, undefined, undefined, undefined, { strict: false }) // expected success\nconst ceMinimalMandatoryUndefinedStrict = new CloudEvent(undefined, undefined, undefined, undefined, { strict: true }) // expected failure, so ceMinimalMandatoryUndefinedStrict will not be defined\n\n// create some sample minimal instances, good even for validation ...\nconst ceMinimal = new CloudEvent('1', // eventID\n  'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\n  '/', // source\n  {} // data (empty) // optional, but useful the same in this sample usage\n)\n\n// create some instance with all attributes ...\n// define some common attributes\nconst ceCommonOptions = {\n  eventTypeVersion: '1.0.0',\n  eventTime: new Date(),\n  extensions: { 'exampleExtension': 'value' },\n  contentType: 'application/json',\n  schemaURL: 'http://my-schema.localhost.localdomain',\n  strict: false // same as default\n}\nconst ceCommonOptionsStrict = { ...ceCommonOptions, strict: true }\n// create some instances with an undefined mandatory argument (handled by defaults), but with strict flag disabled: expected success ...\n// note that null values are not handled by default values, only undefined values ...\nconst ceFull = new CloudEvent('1/full',\n  'com.github.smartiniOnGitHub.cloudeventjs.testevent',\n  '/test',\n  { 'hello': 'world', year: 2018 }, // data\n  ceCommonOptions\n)\nconst ceFullStrict = new CloudEvent('2/full-strict',\n  'com.github.smartiniOnGitHub.cloudeventjs.testevent',\n  '/test',\n  { 'hello': 'world', year: 2018 }, // data\n  ceCommonOptionsStrict // use common options, but set strict mode to true\n)\nassert(ceFullStrict.isStrict)\nassert(!ceFull.isStrict) // ensure common options object has not been changed when reusing some of its values for the second instance\nassert(!CloudEvent.isStrictEvent(ceFull)) // the same, but using static method\n// create an instance that wrap an Error\nconst error = new Error('sample error')\nerror.code = 1000 // add a sample error code, as number\nconst errorToData = T.errorToData(error, {\n  includeStackTrace: true,\n  // addStatus: false,\n  addTimestamp: true\n})\nconst ceErrorStrict = new CloudEvent('2/error-strict',\n  'com.github.smartiniOnGitHub.cloudeventjs.testevent',\n  '/test',\n  errorToData, // data\n  ceCommonOptionsStrict // use common options, but set strict mode to true\n)\nassert(ceErrorStrict !== null)\nassert(ceErrorStrict.isStrict)\nassert(!ceErrorStrict.isStrict) // ensure common options object has not been changed when reusing some of its values for the second instance\nassert(!CloudEvent.isStrictEvent(ceErrorStrict)) // the same, but using static method\n// create an instance with a different content type\nconst ceFullStrictOtherContentType = new CloudEvent('3/full-strict-other-content-type',\n  'com.github.smartiniOnGitHub.cloudeventjs.testevent',\n  '/test',\n  { 'hello': 'world', year: 2018 }, // data\n  { ...ceCommonOptionsStrict, contentType: 'application/xml' } // use common strict options, but set strict mode to true\n)\nassert(ceFullStrictOtherContentType !== null)\nassert(ceFullStrictOtherContentType.isStrict)\n```\n\noptional, do some validations/checks on created instances.\nAs sample, use class static methods like 'isValidEvent' and 'ValidateEvent', \nor instance methods like 'isValid', 'validate', etc ...\n\n```js\nassert(!ceEmpty.isValid())\nassert(!ceMinimalMandatoryUndefinedNoStrict.isValid())\nassert(ceMinimal.isValid())\nassert(ceFull.isValid())\nassert(ceFullStrict.isValid())\nassert(ceErrorStrict.isValid())\nassert(ceFullStrictOtherContentType.isValid())\n// etc ...\n\nconsole.log(`Validation on ceEmpty: isValid: ${ceEmpty.isValid()}, `)\n\nconsole.log(`Validation output for ceEmpty, default strict mode is: size: ${CloudEvent.validateEvent(ceEmpty).length}, details:\\n` + CloudEvent.validateEvent(ceEmpty))\nconsole.log(`Validation output for ceEmpty, force strict mode to true is size: ${CloudEvent.validateEvent(ceEmpty, { strict: true }).length}, details:\\n` + CloudEvent.validateEvent(ceEmpty, { strict: true }))\n```\n\nserialization examples:\n\n```js\n// default contentType\nconst ceFullSerializedStatic = CloudEvent.serializeEvent(ceFull)\nconst ceFullSerialized = ceFull.serialize()\nconsole.log(`Serialization output for ceFull, details:\\n` + ceFullSerialized)\n// non default contentType\nconst ceFullStrictOtherContentTypeSerializedStatic = CloudEvent.serializeEvent(ceFullStrictOtherContentType, {\n  // encoder: (data) => '<data \"encoder\"=\"sample\" />'\n  encodedData: '<data \"hello\"=\"world\" \"year\"=\"2018\" />'\n})\nconst ceFullStrictOtherContentTypeSerialized = ceFullStrictOtherContentType.serialize({\n  // encoder: (data) => '<data \"encoder\"=\"sample\" />'\n  encodedData: '<data \"hello\"=\"world\" \"year\"=\"2018\" />'\n})\nconsole.log(`Serialization output for ceFullStrictOtherContentType, details:\\n` + ceFullStrictOtherContentTypeSerialized)\n\n// then use (send/store/etc) serialized instances ...\n\n```\n\ndeserialization (parse) examples:\n\n```js\n// deserialization examples\n// default contentType\nconsole.log(`\\nSome deserialization/parse examples:`)\nconst ceFullDeserialized = CloudEvent.deserializeEvent(ceFullSerialized)\nassert(ceFullDeserialized !== null)\nassert(ceFullDeserialized.isValid())\nassert(!ceFullDeserialized.isStrict)\nassert(CloudEvent.isCloudEvent(ceFullDeserialized))\nconsole.log(`cloudEvent dump: ${T.dumpObject(ceFullDeserialized, 'ceFullDeserialized')}`)\n// non default contentType\nconst ceFullStrictOtherContentTypeDeserialized = CloudEvent.deserializeEvent(ceFullStrictOtherContentTypeSerialized, {\n  // decoder: (data) => { decoder: 'Sample' },\n  decodedData: { hello: 'world', year: 2018 }\n})\nassert(ceFullStrictOtherContentTypeDeserialized !== null)\nassert(ceFullStrictOtherContentTypeDeserialized.isValid())\nassert(ceFullStrictOtherContentTypeDeserialized.isStrict)\nassert(CloudEvent.isCloudEvent(ceFullStrictOtherContentTypeDeserialized))\nconsole.log(`cloudEvent dump: ${T.dumpObject(ceFullStrictOtherContentTypeDeserialized, 'ceFullStrictOtherContentTypeDeserialized')}`)\n\n// then use (validate/send/store/etc) deserialized instances ...\n\n```\n\nLook into the [example](./example/) folder for more sample scripts that uses the library \n(inline but it's the same using it from npm registry).\n\n\n## Requirements\n\nNode.js 8.15.x or later.\n\n\n## Note\n\nNote that in this implementation there is even the ability to validate CloudEvent instances \nin a stricter way, by setting to true the attribute 'strict' in options in constructor options; \nor specify it during validation.\nThat attribute when set will be put in the 'extensions' standard attribute of a CloudEvent.\n\nYou can find Code Documentation for the API of the library [here](https://smartiniongithub.github.io/cloudevent.js/).\n\nSee the CloudEvents Specification [here](https://github.com/cloudevents/spec).\n\nIn the past the name for this package was 'cloudevent.js', but it has been deprecated now \nand changed to the simpler 'cloudevent', so it will be easier to get it at npm.\n\n\n## Contributing\n\n1. Fork it ( https://github.com/smartiniOnGitHub/cloudevent.js/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n\n## License\n\nLicensed under [Apache-2.0](./LICENSE).\n\n----\n",
    "longname": "/Users/martinis/work/prove/cloudevent.js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"cloudevent\",\n  \"version\": \"0.3.0\",\n  \"description\": \"JavaScript/Node.js implementation of the CloudEvents standard format\",\n  \"main\": \"src/index\",\n  \"scripts\": {\n    \"dependency:log\": \"npm list > ./temp/dependencies.log\",\n    \"docs\": \"npx esdoc\",\n    \"example\": \"node example/nodejs-base\",\n    \"lint\": \"standard \\\"./src/**/*.js\\\" \\\"./test/**/*.test.js\\\" \\\"./example/**/*.js\\\"\",\n    \"lint:log\": \"npm run lint > ./temp/lint-standard.log\",\n    \"license-check\": \"npx legally\",\n    \"license-check:log\": \"npx legally > ./temp/license-check.log\",\n    \"license-checker\": \"npx license-checker --production --onlyAllow='Apache-2.0;BSD-2-Clause;BSD-3-Clause;MIT;ISC'\",\n    \"license-checker:log\": \"npm run license-checker | tee ./temp/license-checker.log\",\n    \"test:unit\": \"tap -J test/*.test.js test/*/*.test.js\",\n    \"test:unit:debug\": \"tap -T --strict --node-arg=--inspect-brk test/*.test.js test/*/*.test.js\",\n    \"test:coverage\": \"npm run test:unit -- --cov --coverage-report=html\",\n    \"test\": \"npm run lint && npm run test:unit\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-node\": \"^1.0.4\",\n    \"simple-get\": \"^3.0.3\",\n    \"standard\": \"^12.0.1\",\n    \"tap\": \"^12.5.2\"\n  },\n  \"peerDependencies\": {},\n  \"engines\": {\n    \"node\": \">=8.15.0\"\n  },\n  \"homepage\": \"https://github.com/smartiniOnGitHub/cloudevent.js#readme\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/smartiniOnGitHub/cloudevent.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/smartiniOnGitHub/cloudevent.js/issues\"\n  },\n  \"keywords\": [\n    \"library\",\n    \"cloudevents\"\n  ],\n  \"author\": \"Sandro Martini <sandro.martini@gmail.com>\",\n  \"license\": \"Apache-2.0\"\n}\n",
    "longname": "/Users/martinis/work/prove/cloudevent.js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 135,
    "kind": "testFile",
    "name": "test/cloudevent.test.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\nconst assert = require('assert')\r\nconst test = require('tap').test\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure CloudEvent class (and related Validator and Transformer classes) are exported by the library', (t) => {\r\n  t.plan(13)\r\n\r\n  {\r\n    const { CloudEvent, CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n    t.ok(CloudEvent)\r\n    // optional, using some standard Node.js assert statements, as a sample\r\n    assert(CloudEvent !== null)\r\n    assert.strictEqual(typeof CloudEvent, 'function')\r\n    assert(new CloudEvent() instanceof CloudEvent)\r\n    assert.strictEqual(CloudEvent.mediaType(), 'application/cloudevents+json')\r\n    t.ok(V)\r\n    t.strictEqual(typeof CloudEvent, 'function')\r\n    t.strictEqual(typeof V, 'function')\r\n    t.strictEqual(typeof T, 'function')\r\n    t.ok(V.isFunction(CloudEvent))\r\n    t.ok(V.isFunction(V))\r\n    t.strictEqual(typeof CloudEvent, 'function')\r\n    t.strictEqual(new CloudEvent() instanceof CloudEvent, true)\r\n    t.strictEqual(CloudEvent.mediaType(), 'application/cloudevents+json')\r\n\r\n    // create an instance with only mandatory arguments (no strict mode, but doesn't matter in this case): expected success ...\r\n    const ceMinimal = new CloudEvent('1', // eventID\r\n      'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\r\n      '/', // source\r\n      {} // data (empty) // optional, but useful the same in this sample usage\r\n    )\r\n    t.ok(ceMinimal)\r\n    // console.log(`DEBUG - cloudEvent details: ceMinimal = ${JSON.stringify(ceMinimal)}`)\r\n    // console.log(`DEBUG - cloudEvent details: ${T.dumpObject(ceMinimal, 'ceMinimal')}`)\r\n\r\n    // check that created instances belongs to the right base class\r\n    t.strictEqual(typeof ceMinimal, 'object')\r\n    t.ok(V.isClass(ceMinimal, CloudEvent))\r\n  }\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure isValid and validate works good on undefined and null objects', (t) => {\r\n  t.plan(7)\r\n  const { CloudEvent } = require('../src/')\r\n  t.ok(CloudEvent)\r\n\r\n  // undefined\r\n  t.notOk()\r\n  t.notOk(CloudEvent.isValidEvent())\r\n  t.strictSame(CloudEvent.validateEvent(), [new Error('CloudEvent undefined or null')])\r\n\r\n  // null\r\n  t.notOk(null)\r\n  t.notOk(CloudEvent.isValidEvent(null))\r\n  t.strictSame(CloudEvent.validateEvent(null), [new Error('CloudEvent undefined or null')])\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('create some CloudEvent instances (empty, without minimal arguments set or not set) and ensure they are different objects', (t) => {\r\n  t.plan(12)\r\n  const { CloudEvent } = require('../src/')\r\n  t.ok(CloudEvent)\r\n\r\n  {\r\n    // create an instance without mandatory arguments (but no strict mode): expected success ...\r\n    const ceEmpty = new CloudEvent()\r\n    t.ok(ceEmpty)\r\n    t.ok(!CloudEvent.isValidEvent(ceEmpty))\r\n    // t.strictSame(CloudEvent.validateEvent(ceEmpty), []) // temp, to see the error during development ...\r\n    t.strictSame(CloudEvent.validateEvent(ceEmpty).length, 3) // simplify comparison of results, check only the  number of expected errors ...\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(!ceEmpty.isValid())\r\n    t.strictSame(ceEmpty.validate(ceEmpty).length, 3) // simplify comparison of results, check only the  number of expected errors ...\r\n    t.ok(!ceEmpty.isStrict)\r\n  }\r\n\r\n  {\r\n    // create an instance without mandatory arguments (but with strict mode): expected failure ...\r\n    let ceEmpty2 = null\r\n    try {\r\n      ceEmpty2 = new CloudEvent(undefined, undefined, undefined, undefined, { strict: true })\r\n      assert(ceEmpty2 === null) // never executed\r\n    } catch (e) {\r\n      t.ok(e) // expected error here\r\n      t.ok(!CloudEvent.isValidEvent(ceEmpty2))\r\n      t.strictSame(CloudEvent.validateEvent(ceEmpty2), [new Error('CloudEvent undefined or null')])\r\n      // the same but using normal instance methods, to ensure they works good ... no because here instance is null\r\n    }\r\n    t.equal(ceEmpty2, null)\r\n    // the same test, but in a shorter form ...\r\n    t.throws(function () {\r\n      const ce = new CloudEvent(undefined, undefined, undefined, undefined, { strict: true })\r\n      assert(ce === null) // never executed\r\n    }, Error, 'Expected exception when creating a CloudEvent without mandatory arguments with strict flag enabled')\r\n  }\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('create some CloudEvent instances (with minimal fields set) and ensure they are different objects', (t) => {\r\n  t.plan(41)\r\n  const { CloudEvent } = require('../src/')\r\n  t.ok(CloudEvent)\r\n\r\n  // t.notSame(CloudEvent.isValidEvent, CloudEvent.validateEvent)\r\n  t.strictNotSame(CloudEvent.isValidEvent, CloudEvent.validateEvent)\r\n\r\n  {\r\n    // create an instance with only mandatory arguments (no strict mode, but doesn't matter in this case): expected success ...\r\n    const ceMinimal = new CloudEvent('1', // eventID\r\n      'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\r\n      '/', // source\r\n      {} // data (empty) // optional, but useful the same in this sample usage\r\n    )\r\n    t.ok(ceMinimal)\r\n    // console.log(`DEBUG - cloudEvent details: ceMinimal = ${JSON.stringify(ceMinimal)}`)\r\n    // console.log(`DEBUG - cloudEvent details: ${T.dumpObject(ceMinimal, 'ceMinimal')}`)\r\n    // console.log(`DEBUG - cloudEvent details: ${ceMinimal}`) // implicit call of its toString method ...\r\n    t.ok(CloudEvent.isValidEvent(ceMinimal))\r\n    t.strictSame(CloudEvent.validateEvent(ceMinimal), [])\r\n    // t.strictSame(CloudEvent.validateEvent(ceEmpty), []) // temp, to see the error during development ...\r\n    t.strictSame(CloudEvent.validateEvent(ceMinimal).length, 0) // simplify comparison of results, check only the  number of expected errors ...\r\n    // create another instance, similar\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(ceMinimal.isValid())\r\n    t.strictSame(ceMinimal.validate(), [])\r\n    t.strictSame(ceMinimal.validate().length, 0) // simplify comparison of results, check only the  number of expected errors ...\r\n    t.ok(!ceMinimal.isStrict)\r\n    const ceMinimal2 = new CloudEvent('2', // eventID\r\n      'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\r\n      '/', // source\r\n      {} // data (empty) // optional, but useful the same in this sample usage\r\n    )\r\n    t.ok(ceMinimal2)\r\n    t.ok(CloudEvent.isValidEvent(ceMinimal2)) // using default strict mode in the event\r\n    t.ok(CloudEvent.isValidEvent(ceMinimal2, { strict: false })) // same of previous but using strict mode in validation options\r\n    t.strictSame(CloudEvent.validateEvent(ceMinimal2), [])\r\n    t.strictSame(CloudEvent.validateEvent(ceMinimal2).length, 0)\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(ceMinimal2.isValid()) // using default strict mode in the event\r\n    t.ok(ceMinimal2.isValid({ strict: false })) // same of previous but using strict mode in validation options\r\n    t.strictSame(ceMinimal2.validate(), [])\r\n    t.strictSame(ceMinimal2.validate().length, 0)\r\n    // then ensure they are different (have different values inside) ...\r\n    assert(ceMinimal !== ceMinimal2) // they must be different object references\r\n    t.notSame(ceMinimal, ceMinimal2)\r\n    t.strictNotSame(ceMinimal, ceMinimal2)\r\n  }\r\n\r\n  {\r\n    // create an instance with a mandatory argument undefined (but no strict mode): expected success ...\r\n    // note that undefined arguments will be handled by default arguments, so all will be good the same here ...\r\n    const ceMinimalMandatoryUndefinedNoStrict = new CloudEvent(undefined, undefined, undefined, undefined, { strict: false })\r\n    assert(ceMinimalMandatoryUndefinedNoStrict !== null)\r\n    t.ok(ceMinimalMandatoryUndefinedNoStrict)\r\n    t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryUndefinedNoStrict)) // using default strict mode in the event\r\n    t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryUndefinedNoStrict, { strict: false })) // same of previous but using strict mode in validation options\r\n    t.strictSame(CloudEvent.validateEvent(ceMinimalMandatoryUndefinedNoStrict, { strict: false }).length, 3)\r\n    t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryUndefinedNoStrict, { strict: true })) // the same but validate with strict mode enabled ...\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(!ceMinimalMandatoryUndefinedNoStrict.isValid()) // using default strict mode in the event\r\n    t.ok(!ceMinimalMandatoryUndefinedNoStrict.isValid({ strict: false })) // same of previous but using strict mode in validation options\r\n    t.strictSame(ceMinimalMandatoryUndefinedNoStrict.validate({ strict: false }).length, 3)\r\n    t.ok(!ceMinimalMandatoryUndefinedNoStrict.isValid({ strict: true })) // the same but validate with strict mode enabled ...\r\n\r\n    // the same but with strict mode: expected exception ...\r\n    t.throws(function () {\r\n      const ceMinimalMandatoryUndefinedStrict = new CloudEvent(undefined, undefined, undefined, undefined, { strict: true })\r\n      assert(ceMinimalMandatoryUndefinedStrict === null) // never executed\r\n    }, Error, 'Expected exception when creating a CloudEvent without mandatory arguments with strict flag enabled')\r\n  }\r\n\r\n  {\r\n    // create an instance with a mandatory argument null (but no strict mode): expected success ...\r\n    // note that undefined arguments will be handled by default arguments, so all will be good the same here ...\r\n    const ceMinimalMandatoryNullNoStrict = new CloudEvent(null, null, null, null, { strict: false })\r\n    assert(ceMinimalMandatoryNullNoStrict !== null)\r\n    t.ok(ceMinimalMandatoryNullNoStrict)\r\n    t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryNullNoStrict)) // using default strict mode in the event\r\n    t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryNullNoStrict, { strict: false })) // same of previous but using strict mode in validation options\r\n    t.strictSame(CloudEvent.validateEvent(ceMinimalMandatoryNullNoStrict, { strict: false }).length, 3)\r\n    t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryNullNoStrict, { strict: true })) // the same but validate with strict mode enabled ...\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(!ceMinimalMandatoryNullNoStrict.isValid()) // using default strict mode in the event\r\n    t.ok(!ceMinimalMandatoryNullNoStrict.isValid({ strict: false })) // same of previous but using strict mode in validation options\r\n    t.strictSame(ceMinimalMandatoryNullNoStrict.validate({ strict: false }).length, 3)\r\n    t.ok(!ceMinimalMandatoryNullNoStrict.isValid({ strict: true })) // the same but validate with strict mode enabled ...\r\n\r\n    // the same but with strict mode: expected exception ...\r\n    t.throws(function () {\r\n      const ceMinimalMandatoryNullStrict = new CloudEvent(null, null, null, null, { strict: true })\r\n      assert(ceMinimalMandatoryNullStrict === null) // never executed\r\n    }, Error, 'Expected exception when creating a CloudEvent without mandatory arguments with strict flag enabled')\r\n  }\r\n})\r\n\r\n/** create some common options, for better reuse in tests */\r\nconst ceCommonOptions = {\r\n  eventTypeVersion: '1.0.0',\r\n  eventTime: new Date(),\r\n  extensions: { 'exampleExtension': 'value' },\r\n  contentType: 'application/json',\r\n  schemaURL: 'http://my-schema.localhost.localdomain',\r\n  strict: false\r\n}\r\n/** create some common options with strict flag enabled, for better reuse in tests */\r\nconst ceCommonOptionsStrict = { ...ceCommonOptions, strict: true }\r\n/** create a sample namespace for events here, for better reuse in tests */\r\nconst ceNamespace = 'com.github.smartiniOnGitHub.cloudeventjs.testevent'\r\n/** create a sample common server URL, for better reuse in tests */\r\nconst ceServerUrl = '/test'\r\n/** create some common data from an object, for better reuse in tests */\r\nconst ceCommonData = { 'hello': 'world', year: 2018 }\r\n/** create some common data from a Map, for better reuse in tests */\r\nconst ceMapData = new Map() // empty Map\r\n// const ceMapData = new Map([['key-1', 'value 1'], ['key-2', 'value 2']])\r\nceMapData.set('key-1', 'value 1')\r\nceMapData.set('key-2', 'value 2')\r\n\r\n/** @test {CloudEvent} */\r\ntest('create two CloudEvent instances with all arguments (mandatory and optional arguments) and ensure they are different objects', (t) => {\r\n  t.plan(21)\r\n  const { CloudEvent } = require('../src/')\r\n  t.ok(CloudEvent)\r\n\r\n  // create an instance with an undefined mandatory argument (handled by defaults), but with strict flag disabled: expected success ...\r\n  // note that null values are not handled by default values, only undefined values ...\r\n  const ceFull1 = new CloudEvent('1/full',\r\n    ceNamespace,\r\n    ceServerUrl,\r\n    ceCommonData,\r\n    ceCommonOptions\r\n  )\r\n  t.ok(ceFull1)\r\n  t.ok(CloudEvent.isValidEvent(ceFull1))\r\n  t.ok(CloudEvent.isValidEvent(ceFull1, { strict: false }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFull1), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceFull1).length, 0)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFull1.isValid())\r\n  t.ok(ceFull1.isValid({ strict: false }))\r\n  t.strictSame(ceFull1.validate(), [])\r\n  t.strictSame(ceFull1.validate().length, 0)\r\n\r\n  // create another instance with all fields equals: expected success ...\r\n  const ceFull1Clone = new CloudEvent('1/full', // should be '2/full/no-strict' ...\r\n    ceNamespace,\r\n    ceServerUrl,\r\n    ceCommonData,\r\n    ceCommonOptions\r\n  )\r\n  t.ok(ceFull1Clone)\r\n  t.ok(CloudEvent.isValidEvent(ceFull1Clone))\r\n  t.ok(CloudEvent.isValidEvent(ceFull1Clone, { strict: false }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFull1Clone), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceFull1Clone).length, 0)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFull1Clone.isValid())\r\n  t.ok(ceFull1Clone.isValid({ strict: false }))\r\n  t.strictSame(ceFull1Clone.validate(), [])\r\n  t.strictSame(ceFull1Clone.validate().length, 0)\r\n\r\n  // then ensure they are different objects ...\r\n  assert(ceFull1 !== ceFull1Clone) // they must be different object references\r\n  t.same(ceFull1, ceFull1Clone)\r\n  t.strictSame(ceFull1, ceFull1Clone)\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('create CloudEvent instances with different kind of data attribute, and ensure the validation is right', (t) => {\r\n  t.plan(81)\r\n  const { CloudEvent } = require('../src/')\r\n  t.ok(CloudEvent)\r\n\r\n  {\r\n    // create an instance with undefined data attribute, but with strict flag disabled: expected success ...\r\n    // note that null values are not handled by default values, only undefined values ...\r\n    const ceFullDataUndefined = new CloudEvent('1/full/undefined-data/no-strict',\r\n      ceNamespace,\r\n      ceServerUrl,\r\n      undefined, // data\r\n      ceCommonOptions\r\n    )\r\n    assert(ceFullDataUndefined !== null)\r\n    t.ok(ceFullDataUndefined)\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataUndefined))\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataUndefined, { strict: false }))\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataUndefined), [])\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataUndefined, { strict: false }).length, 0)\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(ceFullDataUndefined.isValid())\r\n    t.ok(ceFullDataUndefined.isValid({ strict: false }))\r\n    t.strictSame(ceFullDataUndefined.validate(), [])\r\n    t.strictSame(ceFullDataUndefined.validate({ strict: false }).length, 0)\r\n    // the same with with strict mode enabled ...\r\n    const ceFullDataUndefinedStrict = new CloudEvent('1/full/undefined-data/strict',\r\n      ceNamespace,\r\n      ceServerUrl,\r\n      undefined, // data\r\n      ceCommonOptionsStrict\r\n    )\r\n    assert(ceFullDataUndefinedStrict !== null)\r\n    t.ok(ceFullDataUndefinedStrict)\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataUndefinedStrict))\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataUndefinedStrict, { strict: true }))\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataUndefinedStrict), [])\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataUndefinedStrict, { strict: true }).length, 0)\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(ceFullDataUndefinedStrict.isValid())\r\n    t.ok(ceFullDataUndefinedStrict.isValid({ strict: true }))\r\n    t.strictSame(ceFullDataUndefinedStrict.validate(), [])\r\n    t.strictSame(ceFullDataUndefinedStrict.validate({ strict: true }).length, 0)\r\n  }\r\n\r\n  {\r\n    // create an instance with null data attribute, but with strict flag disabled: expected success ...\r\n    // note that null values are not handled by default values, only undefined values ...\r\n    const ceFullDataNull = new CloudEvent('1/full/null-data/no-strict',\r\n      ceNamespace,\r\n      ceServerUrl,\r\n      null, // data\r\n      ceCommonOptions\r\n    )\r\n    assert(ceFullDataNull !== null)\r\n    t.ok(ceFullDataNull)\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataNull))\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataNull, { strict: false }))\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataNull), [])\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataNull, { strict: false }).length, 0)\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(ceFullDataNull.isValid())\r\n    t.ok(ceFullDataNull.isValid({ strict: false }))\r\n    t.strictSame(ceFullDataNull.validate(), [])\r\n    t.strictSame(ceFullDataNull.validate({ strict: false }).length, 0)\r\n    // the same with with strict mode enabled ...\r\n    const ceFullDataNullStrict = new CloudEvent('1/full/null-data/strict',\r\n      ceNamespace,\r\n      ceServerUrl,\r\n      null, // data\r\n      ceCommonOptionsStrict\r\n    )\r\n    assert(ceFullDataNullStrict !== null)\r\n    t.ok(ceFullDataNullStrict)\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataNullStrict))\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataNullStrict, { strict: true }))\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataNullStrict), [])\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataNullStrict, { strict: true }).length, 0)\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(ceFullDataNullStrict.isValid())\r\n    t.ok(ceFullDataNullStrict.isValid({ strict: true }))\r\n    t.strictSame(ceFullDataNullStrict.validate(), [])\r\n    t.strictSame(ceFullDataNullStrict.validate({ strict: true }).length, 0)\r\n  }\r\n\r\n  {\r\n    // create an instance with a string data attribute, but with strict flag disabled: expected success ...\r\n    const ceFullDataString = new CloudEvent('1/full/string-data/no-strict',\r\n      ceNamespace,\r\n      ceServerUrl,\r\n      'data as a string, bad here', // data\r\n      ceCommonOptions\r\n    )\r\n    assert(ceFullDataString !== null)\r\n    t.ok(ceFullDataString)\r\n    // data type errors handled only in strict mode currently ...\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataString))\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataString, { strict: false })) // good the same\r\n    t.ok(!CloudEvent.isValidEvent(ceFullDataString, { strict: true })) // bad here (right)\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataString), [])\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataString, { strict: false }).length, 0) // good the same\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataString, { strict: true }).length, 1) // bad here (right)\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(ceFullDataString.isValid())\r\n    t.ok(ceFullDataString.isValid({ strict: false }))\r\n    t.ok(!ceFullDataString.isValid({ strict: true }))\r\n    t.strictSame(ceFullDataString.validate(), [])\r\n    t.strictSame(ceFullDataString.validate({ strict: false }).length, 0)\r\n    t.strictSame(ceFullDataString.validate({ strict: true }).length, 1)\r\n    // the same with with strict mode enabled ...\r\n    const ceFullDataStringStrict = new CloudEvent('1/full/string-data/strict',\r\n      ceNamespace,\r\n      ceServerUrl,\r\n      'data as a string, bad here', // data\r\n      ceCommonOptionsStrict\r\n    )\r\n    assert(ceFullDataStringStrict !== null)\r\n    t.ok(ceFullDataStringStrict)\r\n    // data type errors handled only in strict mode currently ...\r\n    // note that in the following lines even if I force 'strict: false' he won't be used because already set in the object instance ...\r\n    t.ok(!CloudEvent.isValidEvent(ceFullDataStringStrict))\r\n    t.ok(!CloudEvent.isValidEvent(ceFullDataStringStrict, { strict: true }))\r\n    t.ok(!CloudEvent.isValidEvent(ceFullDataStringStrict, { strict: false }))\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataStringStrict).length, 1)\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataStringStrict, { strict: true }).length, 1)\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataStringStrict, { strict: false }).length, 1)\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(!ceFullDataStringStrict.isValid())\r\n    t.ok(!ceFullDataStringStrict.isValid({ strict: true }))\r\n    t.ok(!ceFullDataStringStrict.isValid({ strict: false }))\r\n    t.strictSame(ceFullDataStringStrict.validate().length, 1)\r\n    t.strictSame(ceFullDataStringStrict.validate({ strict: true }).length, 1)\r\n    t.strictSame(ceFullDataStringStrict.validate({ strict: false }).length, 1)\r\n  }\r\n\r\n  {\r\n    // create an instance with a sample Map data attribute, but with strict flag disabled: expected success ...\r\n    // note that null values are not handled by default values, only undefined values ...\r\n    const ceFullDataMap = new CloudEvent('1/full/map-data/no-strict',\r\n      ceNamespace,\r\n      ceServerUrl,\r\n      ceMapData, // data\r\n      ceCommonOptions\r\n    )\r\n    assert(ceFullDataMap !== null)\r\n    t.ok(ceFullDataMap)\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataMap))\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataMap, { strict: false }))\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataMap), []) // data type errors handled only in strict mode currently ...\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataMap, { strict: false }).length, 0) // data type errors handled only in strict mode currently ...\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(ceFullDataMap.isValid())\r\n    t.ok(ceFullDataMap.isValid({ strict: false }))\r\n    t.strictSame(ceFullDataMap.validate(), []) // data type errors handled only in strict mode currently ...\r\n    t.strictSame(ceFullDataMap.validate({ strict: false }).length, 0) // data type errors handled only in strict mode currently ...\r\n    // the same with with strict mode enabled ...\r\n    const ceFullDataMapStrict = new CloudEvent('1/full/map-data/strict',\r\n      ceNamespace,\r\n      ceServerUrl,\r\n      ceMapData, // data\r\n      ceCommonOptionsStrict\r\n    )\r\n    assert(ceFullDataMapStrict !== null)\r\n    t.ok(ceFullDataMapStrict)\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataMapStrict))\r\n    t.ok(CloudEvent.isValidEvent(ceFullDataMapStrict, { strict: true }))\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataMapStrict).length, 0) // data type errors handled only in strict mode currently ...\r\n    t.strictSame(CloudEvent.validateEvent(ceFullDataMapStrict, { strict: true }).length, 0) // data type errors handled only in strict mode currently ...\r\n    // the same but using normal instance methods, to ensure they works good ...\r\n    t.ok(ceFullDataMapStrict.isValid())\r\n    t.ok(ceFullDataMapStrict.isValid({ strict: true }))\r\n    t.strictSame(ceFullDataMapStrict.validate().length, 0) // data type errors handled only in strict mode currently ...\r\n    t.strictSame(ceFullDataMapStrict.validate({ strict: true }).length, 0) // data type errors handled only in strict mode currently ...\r\n  }\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure a CloudEvent/subclass instance is seen as a CloudEvent instance, but not other objects', (t) => {\r\n  t.plan(36)\r\n\r\n  const { CloudEvent, CloudEventValidator: V } = require('../src/') // get references via destructuring\r\n  t.ok(CloudEvent)\r\n\r\n  /** create some classes, for better reuse in following tests */\r\n  class NotCESubclass {\r\n  }\r\n  class CESubclass extends CloudEvent {\r\n  }\r\n\r\n  {\r\n    // check that an undefined object is not seen as a CloudEvent\r\n    const ceObject = undefined\r\n    t.strictEqual(ceObject, undefined)\r\n    t.strictEqual(ceObject instanceof CloudEvent, false)\r\n    t.ok(!V.isClass(ceObject, CloudEvent))\r\n    t.throws(function () {\r\n      const isCloudEvent = !CloudEvent.isCloudEvent(ceObject)\r\n      assert(isCloudEvent === undefined) // never executed\r\n    }, Error, `Expected exception when calling 'CloudEvent.isCloudEvent' with an undefined or null argument`)\r\n  }\r\n\r\n  {\r\n    // check that a null object is not seen as a CloudEvent\r\n    const ceObject = null\r\n    t.strictEqual(typeof ceObject, 'object')\r\n    t.strictEqual(ceObject, null)\r\n    t.strictEqual(ceObject instanceof CloudEvent, false)\r\n    t.ok(!V.isClass(ceObject, CloudEvent))\r\n    t.throws(function () {\r\n      const isCloudEvent = !CloudEvent.isCloudEvent(ceObject)\r\n      assert(isCloudEvent === null) // never executed\r\n    }, Error, `Expected exception when calling 'CloudEvent.isCloudEvent' with an undefined or null argument`)\r\n  }\r\n\r\n  {\r\n    // check that a generic object is not seen as a CloudEvent\r\n    const ceObject = {}\r\n    t.strictEqual(typeof ceObject, 'object')\r\n    t.strictEqual(ceObject instanceof CloudEvent, false)\r\n    t.ok(!V.isClass(ceObject, CloudEvent))\r\n    t.ok(!CloudEvent.isCloudEvent(ceObject))\r\n    t.ok(V.isStringNotEmpty(ceObject.toString()))\r\n  }\r\n\r\n  {\r\n    // check that even an empty instance belongs to the right base class\r\n    const ceEmpty = new CloudEvent()\r\n    t.strictEqual(typeof ceEmpty, 'object')\r\n    t.strictEqual(ceEmpty instanceof CloudEvent, true)\r\n    t.ok(!V.isClass(ceEmpty, NotCESubclass))\r\n    t.ok(V.isClass(ceEmpty, CloudEvent))\r\n    t.ok(!V.isClass(ceEmpty, CESubclass))\r\n    t.ok(CloudEvent.isCloudEvent(ceEmpty))\r\n    t.ok(V.isStringNotEmpty(ceEmpty.toString()))\r\n\r\n    // check that a subclass instance is seen as a CloudEvent\r\n    const ceEmptySubclass = new CESubclass()\r\n    t.strictEqual(typeof ceEmptySubclass, 'object')\r\n    t.strictEqual(ceEmptySubclass instanceof CloudEvent, true)\r\n    t.ok(!V.isClass(ceEmptySubclass, NotCESubclass))\r\n    t.ok(V.isClass(ceEmptySubclass, CloudEvent))\r\n    t.ok(V.isClass(ceEmptySubclass, CESubclass))\r\n    t.ok(CloudEvent.isCloudEvent(ceEmptySubclass))\r\n    t.ok(V.isStringNotEmpty(ceEmptySubclass.toString()))\r\n\r\n    // check that a class instance outside CloudEvent class hierarchy is not seen as a CloudEvent\r\n    const ceEmptyNoSubclass = new NotCESubclass()\r\n    t.strictEqual(typeof ceEmptyNoSubclass, 'object')\r\n    t.strictEqual(ceEmptyNoSubclass instanceof CloudEvent, false)\r\n    t.ok(V.isClass(ceEmptyNoSubclass, NotCESubclass))\r\n    t.ok(!V.isClass(ceEmptyNoSubclass, CloudEvent))\r\n    t.ok(!V.isClass(ceEmptyNoSubclass, CESubclass))\r\n    t.ok(!CloudEvent.isCloudEvent(ceEmptyNoSubclass))\r\n    t.ok(V.isStringNotEmpty(ceEmptyNoSubclass.toString()))\r\n  }\r\n})\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/test/cloudevent.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "test0",
    "testId": 0,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test0",
    "access": null,
    "description": "ensure CloudEvent class (and related Validator and Transformer classes) are exported by the library",
    "lineNumber": 22,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "test1",
    "testId": 1,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test1",
    "access": null,
    "description": "ensure isValid and validate works good on undefined and null objects",
    "lineNumber": 60,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "test2",
    "testId": 2,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test2",
    "access": null,
    "description": "create some CloudEvent instances (empty, without minimal arguments set or not set) and ensure they are different objects",
    "lineNumber": 77,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "test3",
    "testId": 3,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test3",
    "access": null,
    "description": "create some CloudEvent instances (with minimal fields set) and ensure they are different objects",
    "lineNumber": 117,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "test4",
    "testId": 4,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test4",
    "access": null,
    "description": "create two CloudEvent instances with all arguments (mandatory and optional arguments) and ensure they are different objects",
    "lineNumber": 238,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "test5",
    "testId": 5,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test5",
    "access": null,
    "description": "create CloudEvent instances with different kind of data attribute, and ensure the validation is right",
    "lineNumber": 287,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "test6",
    "testId": 6,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test6",
    "access": null,
    "description": "ensure a CloudEvent/subclass instance is seen as a CloudEvent instance, but not other objects",
    "lineNumber": 464,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 143,
    "kind": "testFile",
    "name": "test/index.test.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\nconst assert = require('assert')\r\nconst test = require('tap').test\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure objects exported by index script, exists and are of the right type', (t) => {\r\n  t.plan(19)\r\n\r\n  {\r\n    const CloudEventExports = require('../src/') // reference the library\r\n    assert(CloudEventExports !== null)\r\n    assert.strictEqual(typeof CloudEventExports, 'object')\r\n    t.ok(CloudEventExports)\r\n    t.strictEqual(typeof CloudEventExports, 'object')\r\n    const CloudEventClass = CloudEventExports.CloudEvent // reference the implementation class\r\n    t.ok(CloudEventClass)\r\n    t.strictEqual(typeof CloudEventClass, 'function')\r\n    const CloudEventValidator = CloudEventExports.CloudEventValidator // reference the validator class\r\n    t.ok(CloudEventValidator)\r\n    t.strictEqual(typeof CloudEventValidator, 'function')\r\n    const CloudEventTransformer = CloudEventExports.CloudEventTransformer // reference the transformer class\r\n    t.ok(CloudEventTransformer)\r\n    t.strictEqual(typeof CloudEventTransformer, 'function')\r\n  }\r\n\r\n  {\r\n    const { CloudEvent: CEClass, CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n    // const { CloudEvent, CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n    t.strictEqual(typeof CEClass, 'function')\r\n    t.strictEqual(typeof V.isClass, 'function')\r\n    t.strictEqual(typeof T.dumpObject, 'function')\r\n    t.ok(V.isFunction(CEClass))\r\n    t.ok(V.isFunction(V.isClass))\r\n    t.ok(V.isFunction(T.dumpObject))\r\n\r\n    const { CloudEvent } = require('../src/') // get references via destructuring\r\n    t.ok(CloudEvent)\r\n    t.strictEqual(typeof CloudEvent, 'function')\r\n\r\n    // create an instance with only mandatory arguments (no strict mode, but doesn't matter in this case): expected success ...\r\n    const ceMinimal = new CEClass('1', // eventID\r\n      'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\r\n      '/', // source\r\n      {} // data (empty) // optional, but useful the same in this sample usage\r\n    )\r\n    t.ok(ceMinimal)\r\n    // console.log(`DEBUG - cloudEvent details: ceMinimal = ${JSON.stringify(ceMinimal)}`)\r\n    // console.log(`DEBUG - cloudEvent details: ${T.dumpObject(ceMinimal, 'ceMinimal')}`)\r\n\r\n    // check that created instances belongs to the right base class\r\n    t.ok(V.isClass(ceMinimal, CloudEvent))\r\n    t.ok(V.isClass(ceMinimal, CEClass))\r\n  }\r\n})\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/test/index.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "test7",
    "testId": 7,
    "memberof": "test/index.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/index.test.js~test7",
    "access": null,
    "description": "ensure objects exported by index script, exists and are of the right type",
    "lineNumber": 22,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 145,
    "kind": "testFile",
    "name": "test/transformer.test.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\nconst assert = require('assert')\r\nconst test = require('tap').test\r\n\r\n/** @test {Transformer} */\r\ntest('ensure the Transformer class (direct reference to it) works good', (t) => {\r\n  t.plan(4)\r\n\r\n  {\r\n    const T = require('../src/transformer') // direct reference to the library\r\n    t.ok(T)\r\n    t.strictEqual(typeof T, 'function')\r\n    // optional, using some standard Node.js assert statements, as a sample\r\n    assert(T !== null)\r\n    assert.strictEqual(typeof T, 'function')\r\n    // assert(new T() instanceof T) // no more allowed\r\n  }\r\n\r\n  {\r\n    const { CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n    t.ok(V.isFunction(T))\r\n    t.throws(function () {\r\n      const t = new T()\r\n      assert(t === null) // never executed\r\n    }, Error, 'Expected exception when creating a Transformer instance')\r\n  }\r\n})\r\n\r\n/** @test {Transformer} */\r\ntest('ensure the Transformer class is good and expose some functions to transform timestamps', (t) => {\r\n  t.plan(10)\r\n  const { CloudEvent, CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n  t.strictEqual(typeof CloudEvent, 'function')\r\n  t.strictEqual(typeof V.isClass, 'function')\r\n  t.strictEqual(typeof T.dumpObject, 'function')\r\n  t.strictEqual(typeof T.timestampFromString, 'function')\r\n  t.strictEqual(typeof T.timestampToString, 'function')\r\n  t.ok(V.isFunction(CloudEvent))\r\n  t.ok(V.isFunction(V.isClass))\r\n  t.ok(V.isFunction(T.dumpObject))\r\n  t.ok(V.isFunction(T.timestampFromString))\r\n  t.ok(V.isFunction(T.timestampToString))\r\n})\r\n\r\n/** create some common options, for better reuse in tests */\r\nconst commonEventTime = new Date()\r\nconst endOf2018TimestampAsString = '2018-12-31T23:59:59.999Z'\r\n\r\n/** @test {Transformer} */\r\ntest('ensure timestamps are transformed to string in the right way', (t) => {\r\n  t.plan(14)\r\n\r\n  const { CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n  t.ok(V.isFunction(T))\r\n  t.ok(endOf2018TimestampAsString)\r\n  t.ok(V.isString(endOf2018TimestampAsString))\r\n  t.ok(V.isStringNotEmpty(endOf2018TimestampAsString))\r\n  t.ok(!V.ensureIsString(endOf2018TimestampAsString, 'endOf2018TimestampAsString')) // no error returned\r\n  t.ok(!V.ensureIsStringNotEmpty(endOf2018TimestampAsString, 'endOf2018TimestampAsString')) // no error returned\r\n\r\n  t.throws(function () {\r\n    const timestampAsString = T.timestampToString()\r\n    assert(timestampAsString === null) // never executed\r\n  }, Error, 'Expected exception when transforming an undefined reference to a string')\r\n\r\n  t.throws(function () {\r\n    const timestampAsString = T.timestampToString(undefined)\r\n    assert(timestampAsString === null) // never executed\r\n  }, Error, 'Expected exception when transforming an undefined reference to a string')\r\n\r\n  t.throws(function () {\r\n    const timestampAsString = T.timestampToString(null)\r\n    assert(timestampAsString === null) // never executed\r\n  }, Error, 'Expected exception when transforming an null timestamp to a string')\r\n\r\n  t.throws(function () {\r\n    const timestampAsString = T.timestampToString({})\r\n    assert(timestampAsString === null) // never executed\r\n  }, Error, 'Expected exception when transforming not a right timestamp (Date) to a string')\r\n\r\n  t.throws(function () {\r\n    const timestampAsString = T.timestampToString('bad timestamp')\r\n    assert(timestampAsString === null) // never executed\r\n  }, Error, 'Expected exception when transforming not a right timestamp (Date) to a string')\r\n\r\n  t.throws(function () {\r\n    const timestampAsString = T.timestampToString(endOf2018TimestampAsString) // ok but no string accepted here\r\n    assert(timestampAsString === null) // never executed\r\n  }, Error, 'Expected exception when transforming not a right timestamp (Date) to a string')\r\n\r\n  {\r\n    const timestampAsString = T.timestampToString(commonEventTime)\r\n    t.ok(timestampAsString)\r\n    t.ok(V.isString(timestampAsString))\r\n    // console.log(`timestampAsString: '${timestampAsString}'`)\r\n  }\r\n})\r\n\r\n/** @test {Transformer} */\r\ntest('ensure timestamps are transformed from string in the right way', (t) => {\r\n  t.plan(20)\r\n\r\n  const { CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n  t.ok(V.isFunction(T))\r\n\r\n  t.throws(function () {\r\n    const timestamp = T.timestampFromString()\r\n    assert(timestamp === null) // never executed\r\n  }, Error, 'Expected exception when transforming an undefined reference to a timestamp (Date)')\r\n\r\n  t.throws(function () {\r\n    const timestamp = T.timestampFromString(undefined)\r\n    assert(timestamp === null) // never executed\r\n  }, Error, 'Expected exception when transforming an undefined reference to a timestamp (Date)')\r\n\r\n  t.throws(function () {\r\n    const timestamp = T.timestampFromString(null)\r\n    assert(timestamp === null) // never executed\r\n  }, Error, 'Expected exception when transforming an null timestamp string to a timestamp (Date)')\r\n\r\n  t.throws(function () {\r\n    const timestamp = T.timestampFromString({})\r\n    assert(timestamp === null) // never executed\r\n  }, Error, 'Expected exception when transforming not a right timestamp string to a timestamp (Date)')\r\n\r\n  t.throws(function () {\r\n    const timestamp = T.timestampFromString('bad timestamp')\r\n    assert(timestamp === null) // never executed\r\n  }, Error, 'Expected exception when transforming not a right timestamp string to a timestamp (Date)')\r\n\r\n  {\r\n    const timestamp = T.timestampFromString(endOf2018TimestampAsString)\r\n    t.ok(timestamp)\r\n    t.ok(V.isDateValid(timestamp))\r\n    t.ok(V.isNumber(timestamp.getTime()))\r\n    // console.log(`timestamp: '${timestamp}'`)\r\n  }\r\n\r\n  {\r\n    const timestampFuture = new Date(Date.now() + 1000)\r\n    t.ok(timestampFuture)\r\n    t.ok(V.isDateValid(timestampFuture))\r\n    t.ok(V.isNumber(timestampFuture.getTime()))\r\n    t.ok(!V.isDatePast(timestampFuture))\r\n    t.ok(V.isDateFuture(timestampFuture))\r\n    t.ok(V.ensureIsDatePast(timestampFuture, 'timestampFuture')) // expected error returned\r\n    t.ok(!V.ensureIsDateFuture(timestampFuture, 'timestampFuture')) // no error returned\r\n    t.strictSame(V.ensureIsDate(timestampFuture, 'timestampFuture'), undefined) // no error returned\r\n    t.strictSame(V.ensureIsDatePast(timestampFuture, 'timestampFuture') instanceof Error, true) // expected error returned\r\n    t.strictSame(V.ensureIsDateFuture(timestampFuture, 'timestampFuture'), undefined) // no error returned\r\n  }\r\n\r\n  t.throws(function () {\r\n    const timestamp = T.timestampFromString(commonEventTime) // ok but no Date accepted here\r\n    assert(timestamp === null) // never executed\r\n  }, Error, 'Expected exception when transforming not a right timestamp string to a timestamp (Date)')\r\n})\r\n\r\n/** @test {Transformer} */\r\ntest('ensure the current timestamp is transformed to string and back as date in the right way', (t) => {\r\n  t.plan(8)\r\n\r\n  const { CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n  t.ok(V.isFunction(T))\r\n\r\n  const timestampAsString = T.timestampToString(commonEventTime)\r\n  t.ok(timestampAsString)\r\n  t.ok(V.isString(timestampAsString))\r\n  // console.log(`current timestamp as string (UTC): '${timestampAsString}'`)\r\n\r\n  const timestampFromString = T.timestampFromString(timestampAsString)\r\n  t.ok(timestampFromString)\r\n  t.ok(V.isDateValid(timestampFromString))\r\n  // console.log(`current timestamp from string (with timezone offset): '${timestampFromString}'`)\r\n\r\n  // ensure both timestamps have the same value, but they are different object references\r\n  t.strictSame(timestampFromString.getTime() - T.timezoneOffsetMsec, commonEventTime.getTime())\r\n  t.notStrictEqual(timestampFromString, commonEventTime)\r\n  t.notEqual(timestampFromString, commonEventTime)\r\n})\r\n\r\n/** @test {Transformer} */\r\ntest('ensure errors are transformed into data attribute in the right way', (t) => {\r\n  t.plan(51)\r\n\r\n  const { CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n  t.ok(V.isFunction(T))\r\n\r\n  t.throws(function () {\r\n    const data = T.errorToData()\r\n    assert(data === null) // never executed\r\n  }, Error, 'Expected exception when transforming an undefined reference to object')\r\n\r\n  t.throws(function () {\r\n    const data = T.errorToData(undefined)\r\n    assert(data === null) // never executed\r\n  }, Error, 'Expected exception when transforming an undefined reference to object')\r\n\r\n  t.throws(function () {\r\n    const data = T.errorToData(null)\r\n    assert(data === null) // never executed\r\n  }, Error, 'Expected exception when transforming an null error to object')\r\n\r\n  t.throws(function () {\r\n    const data = T.errorToData({})\r\n    assert(data === null) // never executed\r\n  }, Error, 'Expected exception when transforming not a right error to object')\r\n\r\n  t.throws(function () {\r\n    const data = T.errorToData('error string')\r\n    assert(data === null) // never executed\r\n  }, Error, 'Expected exception when transforming not a right error to object')\r\n\r\n  {\r\n    const error = {}\r\n    // console.log(`DEBUG - error details: ${T.dumpObject(error, 'error')}`)\r\n    t.ok(!V.isError(error))\r\n    t.ok(!V.ensureIsObjectOrCollection(error, 'error')) // no error returned\r\n    t.ok(V.ensureIsError(error, 'error')) // expected error returned\r\n    t.strictSame(V.ensureIsObjectOrCollection(error, 'error'), undefined) // no error returned\r\n    t.strictSame(V.ensureIsError(error, 'error') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const error = new Error()\r\n    // console.log(`DEBUG - error details: ${T.dumpObject(error, 'error')}`)\r\n    t.ok(V.isError(error))\r\n    const data = T.errorToData(error)\r\n    // console.log(`DEBUG - data details: ${T.dumpObject(data, 'data')}`)\r\n    t.ok(data)\r\n    t.ok(V.isObject(data))\r\n    t.strictSame(data, { name: 'Error', message: '', stack: null, status: 'error' })\r\n  }\r\n\r\n  {\r\n    const error = new TypeError()\r\n    // console.log(`DEBUG - error details: ${T.dumpObject(error, 'error')}`)\r\n    t.ok(V.isError(error))\r\n    const data = T.errorToData(error)\r\n    // console.log(`DEBUG - data details: ${T.dumpObject(data, 'data')}`)\r\n    t.ok(data)\r\n    t.ok(V.isObject(data))\r\n    t.strictSame(data, { name: 'TypeError', message: '', stack: null, status: 'error' })\r\n  }\r\n\r\n  {\r\n    const error = new Error('sample error')\r\n    t.ok(V.isError(error))\r\n    error.code = 1000 // add a sample error code, as number\r\n    t.ok(V.isNumber(error.code))\r\n    const data = T.errorToData(error, {\r\n      includeStackTrace: true,\r\n      // addStatus: false,\r\n      addTimestamp: true\r\n    })\r\n    t.ok(data)\r\n    t.ok(V.isObject(data))\r\n    t.ok(data.stack)\r\n    t.ok(V.isString(data.stack))\r\n    data.stack = null // empty the attribute to simplify next comparison\r\n    t.ok(data.timestamp)\r\n    t.ok(V.isNumber(data.timestamp))\r\n    const timestampParsed = new Date(data.timestamp)\r\n    t.ok(V.isDatePast(timestampParsed))\r\n    t.ok(!V.isDateFuture(timestampParsed))\r\n    t.ok(!V.ensureIsDate(timestampParsed, 'timestampParsed')) // no error returned\r\n    t.ok(!V.ensureIsDatePast(timestampParsed, 'timestampParsed')) // no error returned\r\n    t.ok(V.ensureIsDateFuture(timestampParsed, 'timestampParsed')) // expected error returned\r\n    t.strictSame(V.ensureIsDate(timestampParsed, 'timestampParsed'), undefined) // no error returned\r\n    t.strictSame(V.ensureIsDateFuture(timestampParsed, 'timestampParsed') instanceof Error, true) // expected error returned\r\n    delete data.code // delete the attribute to simplify next comparison\r\n    delete data.timestamp // delete the attribute to simplify next comparison\r\n    t.strictSame(data, { name: 'Error', message: 'sample error', stack: null, status: 'error' })\r\n  }\r\n\r\n  {\r\n    const error = new TypeError('sample type error')\r\n    t.ok(V.isError(error))\r\n    error.code = '1000' // add a sample error code, as string\r\n    t.ok(V.isString(error.code))\r\n    const data = T.errorToData(error, {\r\n      includeStackTrace: true,\r\n      // addStatus: false,\r\n      addTimestamp: true\r\n    })\r\n    t.ok(data)\r\n    t.ok(V.isObject(data))\r\n    t.ok(data.stack)\r\n    t.ok(V.isString(data.stack))\r\n    data.stack = null // empty the attribute to simplify next comparison\r\n    t.ok(data.timestamp)\r\n    t.ok(V.isNumber(data.timestamp))\r\n    const timestampParsed = new Date(data.timestamp)\r\n    t.ok(V.isDatePast(timestampParsed))\r\n    t.ok(!V.isDateFuture(timestampParsed))\r\n    t.ok(!V.ensureIsDate(timestampParsed, 'timestampParsed')) // no error returned\r\n    t.ok(!V.ensureIsDatePast(timestampParsed, 'timestampParsed')) // no error returned\r\n    t.ok(V.ensureIsDateFuture(timestampParsed, 'timestampParsed')) // expected error returned\r\n    t.strictSame(V.ensureIsDate(timestampParsed, 'timestampParsed'), undefined) // no error returned\r\n    t.strictSame(V.ensureIsDateFuture(timestampParsed, 'timestampParsed') instanceof Error, true) // expected error returned\r\n    delete data.code // delete the attribute to simplify next comparison\r\n    delete data.timestamp // delete the attribute to simplify next comparison\r\n    t.strictSame(data, { name: 'TypeError', message: 'sample type error', stack: null, status: 'error' })\r\n  }\r\n})\r\n\r\n/** @test {Transformer} */\r\ntest('ensure dumpObject works in the right way', (t) => {\r\n  t.plan(12)\r\n\r\n  const { CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n  t.ok(V.isFunction(T))\r\n\r\n  t.ok(T.dumpObject())\r\n  t.ok(T.dumpObject(null))\r\n  t.ok(T.dumpObject(null, null))\r\n  t.ok(T.dumpObject({}, 'empty_object'))\r\n  t.ok(T.dumpObject({ name: 'Name', age: 20, note: null }, 'object'))\r\n  t.ok(T.dumpObject([1, 2, 3, null], 'array'))\r\n  t.ok(T.dumpObject(new Map([['key-1', 'value 1'], ['key-2', 'value 2']]), 'map'))\r\n  t.ok(T.dumpObject(new Set([['key-1', 'value 1'], ['key-2', 'value 2']]), 'set'))\r\n  t.ok(T.dumpObject(`12345 67890 `, 'string'))\r\n  t.ok(T.dumpObject(1234567890, 'number'))\r\n  t.ok(T.dumpObject(true, 'boolean'))\r\n})\r\n\r\n/** @test {Transformer} */\r\ntest('ensure process info are transformed into data attribute in the right way', (t) => {\r\n  t.plan(10)\r\n\r\n  const { CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n  t.ok(V.isFunction(V))\r\n  t.ok(V.isFunction(T))\r\n  t.ok(V.isFunction(T.processInfoToData))\r\n\r\n  const hostname = require('os').hostname()\r\n  const pid = require('process').pid\r\n\r\n  {\r\n    const data = T.processInfoToData()\r\n    // console.log(`DEBUG - data: ${T.dumpObject(data, 'data')}`)\r\n    t.ok(V.isObject(data))\r\n    t.ok(!V.ensureIsObjectOrCollection(data, 'data')) // no error returned\r\n    t.strictSame(V.ensureIsObjectOrCollection(data, 'data'), undefined) // no error returned\r\n    t.ok(data.hostname)\r\n    t.ok(data.pid)\r\n    t.strictSame(data.hostname, hostname)\r\n    t.strictSame(data.pid, pid)\r\n  }\r\n})\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/test/transformer.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "test8",
    "testId": 8,
    "memberof": "test/transformer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/transformer.test.js~test8",
    "access": null,
    "description": "ensure the Transformer class (direct reference to it) works good",
    "lineNumber": 22,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "test9",
    "testId": 9,
    "memberof": "test/transformer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/transformer.test.js~test9",
    "access": null,
    "description": "ensure the Transformer class is good and expose some functions to transform timestamps",
    "lineNumber": 46,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "test10",
    "testId": 10,
    "memberof": "test/transformer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/transformer.test.js~test10",
    "access": null,
    "description": "ensure timestamps are transformed to string in the right way",
    "lineNumber": 66,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "test11",
    "testId": 11,
    "memberof": "test/transformer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/transformer.test.js~test11",
    "access": null,
    "description": "ensure timestamps are transformed from string in the right way",
    "lineNumber": 116,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "test12",
    "testId": 12,
    "memberof": "test/transformer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/transformer.test.js~test12",
    "access": null,
    "description": "ensure the current timestamp is transformed to string and back as date in the right way",
    "lineNumber": 176,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "test13",
    "testId": 13,
    "memberof": "test/transformer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/transformer.test.js~test13",
    "access": null,
    "description": "ensure errors are transformed into data attribute in the right way",
    "lineNumber": 199,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "test14",
    "testId": 14,
    "memberof": "test/transformer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/transformer.test.js~test14",
    "access": null,
    "description": "ensure dumpObject works in the right way",
    "lineNumber": 324,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "test15",
    "testId": 15,
    "memberof": "test/transformer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/transformer.test.js~test15",
    "access": null,
    "description": "ensure process info are transformed into data attribute in the right way",
    "lineNumber": 344,
    "testTargets": [
      "Transformer"
    ]
  },
  {
    "__docId__": 154,
    "kind": "testFile",
    "name": "test/validator.test.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\nconst assert = require('assert')\r\nconst test = require('tap').test\r\n\r\n/** @test {Validator} */\r\ntest('ensure the Validator class (direct reference to it) works good', (t) => {\r\n  t.plan(5)\r\n  const V = require('../src/validator') // direct reference to the library\r\n  t.ok(V)\r\n  t.strictEqual(typeof V, 'function')\r\n\r\n  // optional, using some standard Node.js assert statements, as a sample\r\n  assert(V !== null)\r\n  assert.strictEqual(typeof V, 'function')\r\n  // assert(new V() instanceof V) // no more allowed\r\n\r\n  t.ok(V.isFunction(V))\r\n  t.ok(V.isFunction(V.isClass))\r\n  t.throws(function () {\r\n    const v = new V()\r\n    assert(v === null) // never executed\r\n  }, Error, 'Expected exception when creating a Validator instance')\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('create CloudEvent instances with different class hierarchy, and ensure the validation is right', (t) => {\r\n  t.plan(33)\r\n\r\n  /** create some classes, for better reuse in following tests */\r\n  const { CloudEvent: CEClass } = require('../src/') // get references via destructuring\r\n  class NotCESubclass {\r\n  }\r\n  class CESubclass extends CEClass {\r\n  }\r\n\r\n  {\r\n    const { CloudEvent, CloudEventValidator: V, CloudEventTransformer: T } = require('../src/') // get references via destructuring\r\n    t.strictEqual(typeof CloudEvent, 'function')\r\n    t.strictEqual(typeof CloudEvent.version, 'function')\r\n    t.strictEqual(typeof V.isClass, 'function')\r\n    t.strictEqual(typeof T.dumpObject, 'function')\r\n    t.ok(V.isFunction(CloudEvent))\r\n    t.ok(V.isFunction(V.isClass))\r\n    t.ok(V.isFunction(T.dumpObject))\r\n\r\n    // create an instance with only mandatory arguments (no strict mode, but doesn't matter in this case): expected success ...\r\n    const ceMinimal = new CEClass('1', // eventID\r\n      'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\r\n      '/', // source\r\n      {} // data (empty) // optional, but useful the same in this sample usage\r\n    )\r\n    t.ok(ceMinimal)\r\n    // console.log(`DEBUG - cloudEvent details: ceMinimal = ${JSON.stringify(ceMinimal)}`)\r\n    // console.log(`DEBUG - cloudEvent details: ${T.dumpObject(ceMinimal, 'ceMinimal')}`)\r\n\r\n    // check that created instances belongs to the right base class\r\n    t.ok(V.isClass(ceMinimal, CloudEvent))\r\n    t.ok(V.isClass(ceMinimal, CEClass))\r\n    t.ok(!V.isClass(ceMinimal, NotCESubclass))\r\n    t.ok(!V.isClass(ceMinimal, CESubclass))\r\n    t.ok(!V.ensureIsClass(ceMinimal, CloudEvent, 'ceMinimal')) // no error returned\r\n    t.ok(!V.ensureIsClass(ceMinimal, CEClass, 'ceMinimal')) // no error returned\r\n    t.ok(V.isClass(V.ensureIsClass(ceMinimal, CESubclass, 'ceMinimal'), TypeError)) // expected error returned\r\n    t.ok(V.isClass(V.ensureIsClass(ceMinimal, NotCESubclass, 'ceMinimal'), TypeError)) // expected error returned\r\n\r\n    // create an instance with only mandatory arguments (no strict mode, but doesn't matter in this case): expected success ...\r\n    const ceMinimalSubclass = new CESubclass('1EX', // eventID\r\n      'org.github.smartiniOnGitHub.cloudeventjs.testeventEx', // eventType\r\n      '/', // source\r\n      {} // data (empty) // optional, but useful the same in this sample usage\r\n    )\r\n    t.ok(ceMinimalSubclass)\r\n    // console.log(`DEBUG - cloudEvent details: ceMinimalSubclass = ${JSON.stringify(ceMinimalSubclass)}`)\r\n    // console.log(`DEBUG - cloudEvent details: ${T.dumpObject(ceMinimalSubclass, 'ceMinimalSubclass')}`)\r\n\r\n    // check that created instances belongs to the right base class\r\n    t.ok(V.isClass(ceMinimalSubclass, CloudEvent))\r\n    t.ok(V.isClass(ceMinimalSubclass, CEClass))\r\n    t.ok(!V.isClass(ceMinimalSubclass, NotCESubclass))\r\n    t.ok(V.isClass(ceMinimalSubclass, CESubclass))\r\n    t.ok(!V.ensureIsClass(ceMinimalSubclass, CloudEvent, 'ceMinimal')) // no error returned\r\n    t.ok(!V.ensureIsClass(ceMinimalSubclass, CEClass, 'ceMinimal')) // no error returned\r\n    t.ok(!V.ensureIsClass(ceMinimalSubclass, CESubclass, 'ceMinimal')) // no error returned\r\n    t.ok(V.isClass(V.ensureIsClass(ceMinimalSubclass, NotCESubclass, 'ceMinimal'), TypeError)) // expected error returned\r\n  }\r\n\r\n  {\r\n    const { CloudEventValidator: V } = require('../src/') // get references via destructuring\r\n    t.strictEqual(typeof V, 'function')\r\n    t.strictEqual(typeof V.isClass, 'function')\r\n    t.ok(V.isFunction(V))\r\n    t.ok(V.isFunction(V.isClass))\r\n\r\n    const { CloudEvent, CloudEventValidator } = require('../src/') // get references via destructuring\r\n    t.strictEqual(typeof CloudEvent, 'function')\r\n    t.strictEqual(typeof CloudEventValidator, 'function')\r\n    t.ok(V.isFunction(CloudEvent))\r\n    t.ok(V.isFunction(CloudEventValidator))\r\n  }\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure some (less used) validation functions are right', (t) => {\r\n  t.plan(70)\r\n\r\n  const { CloudEvent, CloudEventValidator: V } = require('../src/') // get references via destructuring\r\n  t.ok(CloudEvent)\r\n  t.ok(V)\r\n\r\n  {\r\n    const undefinedGood = undefined\r\n    t.ok(V.isUndefined(undefinedGood))\r\n    t.strictSame(V.ensureIsUndefined(undefinedGood, 'test'), undefined) // no error returned\r\n    t.ok(V.isUndefinedOrNull(undefinedGood))\r\n    t.strictSame(V.ensureIsUndefinedOrNull(undefinedGood, 'test'), undefined) // no error returned\r\n    const undefinedBad = 'defined'\r\n    t.ok(!V.isUndefined(undefinedBad))\r\n    t.strictSame(V.ensureIsUndefined(undefinedBad, 'test') instanceof Error, true) // expected error returned\r\n    t.ok(!V.isUndefinedOrNull(undefinedBad))\r\n    t.strictSame(V.ensureIsUndefinedOrNull(undefinedBad, 'test') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const nullGood = null\r\n    t.ok(V.isNull(nullGood))\r\n    t.strictSame(V.ensureIsNull(nullGood, 'test'), undefined) // no error returned\r\n    t.ok(V.isUndefinedOrNull(nullGood))\r\n    t.strictSame(V.ensureIsUndefinedOrNull(nullGood, 'test'), undefined) // no error returned\r\n    const nullBad = 'defined'\r\n    t.ok(!V.isNull(nullBad))\r\n    t.strictSame(V.ensureIsNull(nullBad, 'test') instanceof Error, true) // expected error returned\r\n    t.ok(!V.isUndefinedOrNull(nullBad))\r\n    t.strictSame(V.ensureIsUndefinedOrNull(nullBad, 'test') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const dateGood = new Date()\r\n    t.ok(V.isDate(dateGood))\r\n    t.strictSame(V.ensureIsDate(dateGood, 'test'), undefined) // no error returned\r\n    const dateBad = Date.now()\r\n    t.ok(!V.isDate(dateBad))\r\n    t.strictSame(V.ensureIsDate(dateBad, 'test') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const relGood = '1.0.0'\r\n    t.ok(V.isVersion(relGood))\r\n    t.strictSame(V.ensureIsVersion(relGood, 'test'), undefined) // no error returned\r\n    const relBad = 'a.b.c-d'\r\n    t.ok(!V.isVersion(relBad))\r\n    t.strictSame(V.ensureIsVersion(relBad, 'test') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const objectBad = 1234567890\r\n    t.ok(V.isNumber(objectBad))\r\n    t.ok(!V.isObject(objectBad))\r\n    t.ok(V.ensureIsObjectOrCollection(objectBad, 'error')) // expected error returned\r\n    t.strictSame(V.ensureIsObjectOrCollection(objectBad, 'error') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const stringBad = 1234567890\r\n    t.ok(!V.isString(stringBad))\r\n    t.ok(!V.isStringNotEmpty(stringBad))\r\n    t.ok(V.ensureIsString(stringBad, 'error')) // expected error returned\r\n    t.strictSame(V.ensureIsString(stringBad, 'error') instanceof Error, true) // expected error returned\r\n    t.ok(V.ensureIsStringNotEmpty(stringBad, 'error')) // expected error returned\r\n    t.strictSame(V.ensureIsStringNotEmpty(stringBad, 'error') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const functionBad = '1234567890'\r\n    t.ok(V.isString(functionBad))\r\n    t.ok(!V.isFunction(functionBad))\r\n    t.ok(V.ensureIsFunction(functionBad, 'error')) // expected error returned\r\n    t.strictSame(V.ensureIsFunction(functionBad, 'error') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const boolGood = true\r\n    t.ok(V.isBoolean(boolGood))\r\n    t.strictSame(V.ensureIsBoolean(boolGood, 'test'), undefined) // no error returned\r\n    const boolBad = 'false'\r\n    t.ok(!V.isBoolean(boolBad))\r\n    t.strictSame(V.ensureIsBoolean(boolBad, 'test') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const uriGood = 'http://localhost:3000/path/nested?param1=value1'\r\n    t.ok(V.isURI(uriGood))\r\n    t.strictSame(V.ensureIsURI(uriGood, null, 'test'), undefined) // no error returned\r\n    const uriBad = 'path/nested?param1=value1' // not relative nor absolute uri, so not a real uri string\r\n    t.ok(!V.isURI(uriBad))\r\n    t.strictSame(V.ensureIsURI(uriBad, null, 'test') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const uriGoodPath = '/path/nested?param1=value1'\r\n    const uriGoodBase = 'http://localhost:3000'\r\n    t.ok(V.isURI(uriGoodPath, uriGoodBase))\r\n    t.strictSame(V.ensureIsURI(uriGoodPath, uriGoodBase, 'test'), undefined) // no error returned\r\n    const uriBad = 'path/nested?param1=value1' // not relative nor absolute uri, so not a real uri string\r\n    t.ok(!V.isURI(uriBad, null))\r\n    t.strictSame(V.ensureIsURI(uriBad, null, 'test') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    const uriGoodPath = '/path/nested?param1=value1'\r\n    const uriBadBase = 'httpz:bad'\r\n    t.ok(!V.isURI(uriGoodPath, uriBadBase))\r\n    t.strictSame(V.ensureIsURI(uriGoodPath, uriBadBase, 'test') instanceof Error, true) // expected error returned\r\n  }\r\n\r\n  {\r\n    // test getSize with different argument types\r\n    t.ok(V.isUndefined(V.getSize(null)))\r\n    t.strictSame(V.getSize(null), undefined)\r\n    const obj = { name: 'Name', age: 20, note: null }\r\n    t.ok(V.isNumber(V.getSize(obj)))\r\n    t.strictSame(V.getSize(obj), 3) // include even null items in the size\r\n    const arr = [1, 2, 3, null]\r\n    t.ok(V.isNumber(V.getSize(arr)))\r\n    t.strictSame(V.getSize(arr), 4) // include even null items in the size\r\n    const map = new Map([['key-1', 'value 1'], ['key-2', 'value 2']])\r\n    t.ok(V.isNumber(V.getSize(map)))\r\n    t.strictSame(V.getSize(map), 2)\r\n    const set = new Set([['key-1', 'value 1'], ['key-2', 'value 2']])\r\n    t.ok(V.isNumber(V.getSize(set)))\r\n    t.strictSame(V.getSize(set), 2)\r\n    const str = '12345 67890 '\r\n    t.ok(V.isNumber(V.getSize(str)))\r\n    t.strictSame(V.getSize(str), 12)\r\n    const otherBadNumber = 1234567890\r\n    t.ok(V.isNumber(otherBadNumber))\r\n    t.throws(function () {\r\n      const size = V.getSize(otherBadNumber)\r\n      assert(size !== null) // never executed\r\n    }, Error, 'Expected exception when trying to get the size of a bad object')\r\n    const otherBadBoolean = true\r\n    t.ok(V.isBoolean(otherBadBoolean))\r\n    t.throws(function () {\r\n      const size = V.getSize(otherBadBoolean)\r\n      assert(size !== null) // never executed\r\n    }, Error, 'Expected exception when trying to get the size of a bad object')\r\n  }\r\n})\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/test/validator.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "test",
    "name": "test16",
    "testId": 16,
    "memberof": "test/validator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validator.test.js~test16",
    "access": null,
    "description": "ensure the Validator class (direct reference to it) works good",
    "lineNumber": 22,
    "testTargets": [
      "Validator"
    ]
  },
  {
    "__docId__": 156,
    "kind": "test",
    "name": "test17",
    "testId": 17,
    "memberof": "test/validator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validator.test.js~test17",
    "access": null,
    "description": "create CloudEvent instances with different class hierarchy, and ensure the validation is right",
    "lineNumber": 42,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "test18",
    "testId": 18,
    "memberof": "test/validator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validator.test.js~test18",
    "access": null,
    "description": "ensure some (less used) validation functions are right",
    "lineNumber": 119,
    "testTargets": [
      "CloudEvent"
    ]
  }
]