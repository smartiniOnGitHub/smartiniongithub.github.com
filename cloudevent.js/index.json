[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/cloudevent.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\n/**\r\n * CloudEvent:\r\n * this module exports some useful definition and utility related to CloudEvents.\r\n */\r\n\r\n/**\r\n * Get a reference to cloudevent validator class.\r\n */\r\nconst V = require('./validator') // get validator from here\r\n\r\n/**\r\n * CloudEvent implementation.\r\n *\r\n * @see https://github.com/cloudevents/spec/blob/master/json-format.md\r\n */\r\nclass CloudEvent {\r\n  /**\r\n   * Create a new instance of a CloudEvent object.\r\n   * @param {!string} eventID the ID of the event (unique), mandatory\r\n   * @param {!string} eventType the type of the event (usually), mandatory\r\n   * @param {!uri} source the source uri of the event (use '/' if empty), mandatory\r\n   * @param {(object|Map|Set)} data the real event data\r\n   * @param {object} options optional attributes of the event; some has default values chosen here:\r\n   *        eventTypeVersion (string) optional,\r\n   *        eventTime (timestamp, default now),\r\n   *        extensions (object) optional but if given must contain at least 1 property (key/value),\r\n   *        contentType (string, default 'application/json') tell how the data attribute must be encoded,\r\n   *        schemaURL (uri) optional,\r\n   *        strict (boolean, default false) tell if object instance will be validated in a more strict way\r\n   * @throws {Error} if strict is true and eventID or eventType is undefined or null\r\n   */\r\n  constructor (eventID, eventType, source, data, {\r\n    eventTypeVersion,\r\n    eventTime = new Date(),\r\n    extensions,\r\n    contentType = 'application/json',\r\n    schemaURL,\r\n    strict = false } = {}\r\n  ) {\r\n    if (strict === true) {\r\n      if (!eventID || !eventType || !source) {\r\n        throw new Error('Unable to create CloudEvent instance, mandatory field missing')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * The event ID.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.eventID = eventID\r\n    /**\r\n     * The event type.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.eventType = eventType\r\n    /**\r\n     * The source URI of the event.\r\n     * @type {uri}\r\n     * @private\r\n     */\r\n    this.source = source\r\n    /**\r\n     * The real event data.\r\n     * Usually it's an object, but could be even a Map or a Set.\r\n     * Copy the original object to avoid changing objects that could be shared.\r\n     * @type {(object|Map|Set)}\r\n     * @private\r\n     */\r\n    this.data = { ...data }\r\n    if (V.isString(data)) {\r\n      // handle an edge case: if the given data is a String, I need to clone in a different way ...\r\n      this.data = data.slice()\r\n    }\r\n\r\n    /**\r\n     * The CloudEvent specification version.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.cloudEventsVersion = this.constructor.version()\r\n    /**\r\n     * The MIME Type for the encoding of the data attribute, when serialized.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.contentType = contentType\r\n    /**\r\n     * The event timestamp.\r\n     * Copy the original object to avoid changing objects that could be shared.\r\n     * @type {timestamp}\r\n     * @private\r\n     */\r\n    this.eventTime = new Date(eventTime.valueOf())\r\n    /**\r\n     * The event version.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.eventTypeVersion = eventTypeVersion\r\n    /**\r\n     * Extensions defined for the event.\r\n     * Copy the original object to avoid changing objects that could be shared.\r\n     * @type {object}\r\n     * @private\r\n     */\r\n    this.extensions = { ...extensions }\r\n    /**\r\n     * The URL of schema for the event, if any.\r\n     * @type {uri}\r\n     * @private\r\n     */\r\n    this.schemaURL = schemaURL\r\n\r\n    // add strict to extensions, but only when defined\r\n    if (strict === true) {\r\n      this.extensions = this.extensions || {}\r\n      this.extensions.strict = strict\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility function that return a dump of the given object.\r\n   *\r\n   * @static\r\n   * @param {(object|Map|Set)} obj the object to dump\r\n   * @param {string} name the name to assign in the returned string\r\n   * @return {string} the dump of the object or a message when obj is undefined/null/not an object\r\n   */\r\n  static dumpObject (obj, name) {\r\n    const n = name || 'noname'\r\n    if (V.isUndefined(obj)) {\r\n      return `${n}: undefined`\r\n    } else if (V.isNull(obj)) {\r\n      return `${n}: null`\r\n    } else if (!V.isObjectOrCollection(obj)) {\r\n      return `${n}: '${obj.toString()}'`\r\n    } else {\r\n      return `${n}: ${JSON.stringify(obj)}`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the version of the CloudEvent Specification implemented here\r\n   *\r\n   * @static\r\n   * @return {string} the value\r\n   */\r\n  static version () {\r\n    return '0.1'\r\n  }\r\n\r\n  /**\r\n   * Return the MIME Type for a CloudEvent\r\n   *\r\n   * @static\r\n   * @return {string} the value\r\n   */\r\n  static mediaType () {\r\n    return 'application/cloudevents+json'\r\n  }\r\n\r\n  /**\r\n   * Tell if the object has the strict flag enabled.\r\n   *\r\n   * @static\r\n   * @param {!object} event the CloudEvent to validate\r\n   * @return {boolean} true if strict, otherwise false\r\n   * @throws {Error} if event if undefined or null\r\n   */\r\n  static isStrictEvent (event) {\r\n    if (V.isUndefinedOrNull(event)) {\r\n      throw new Error('CloudEvent undefined or null')\r\n    }\r\n    if (V.isDefinedAndNotNull(event.extensions)) {\r\n      return event.extensions.strict === true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate the given CloudEvent.\r\n   *\r\n   * @static\r\n   * @param {!object} event the CloudEvent to validate\r\n   * @param {object} options containing: strict (boolean, default false) to validate it in a more strict way\r\n   * @return {object[]} an array of (non null) validation errors, or at least an empty array\r\n   */\r\n  static validateEvent (event, { strict = false } = {}) {\r\n    if (V.isUndefinedOrNull(event)) {\r\n      return [new Error('CloudEvent undefined or null')]\r\n    }\r\n    let ve = [] // validation errors\r\n\r\n    // standard validation\r\n    // note that some properties are not checked here because I assign a default value, and I check them in strict mode, like:\r\n    // data, eventTime, extensions, contentType ...\r\n    // ve.push(V.ensureIsStringNotEmpty(event.cloudEventsVersion, 'cloudEventsVersion')) // no more a public attribute\r\n    ve.push(V.ensureIsStringNotEmpty(event.eventID, 'eventID'))\r\n    ve.push(V.ensureIsStringNotEmpty(event.eventType, 'eventType'))\r\n    ve.push(V.ensureIsStringNotEmpty(event.source, 'source'))\r\n    if (V.isDefinedAndNotNull(event.eventTypeVersion)) {\r\n      ve.push(V.ensureIsStringNotEmpty(event.eventTypeVersion, 'eventTypeVersion'))\r\n    }\r\n    if (V.isDefinedAndNotNull(event.schemaURL)) {\r\n      ve.push(V.ensureIsStringNotEmpty(event.schemaURL, 'schemaURL'))\r\n    }\r\n\r\n    // additional validation if strict mode enabled, or if enabled in the event ...\r\n    if (strict === true || CloudEvent.isStrictEvent(event) === true) {\r\n      ve.push(V.ensureIsClass(event, CloudEvent, 'CloudEvent_Subclass'))\r\n      ve.push(V.ensureIsVersion(event.cloudEventsVersion, 'cloudEventsVersion'))\r\n      if (V.isDefinedAndNotNull(event.data)) {\r\n        ve.push(V.ensureIsObjectOrCollectionNotString(event.data, 'data'))\r\n      }\r\n      if (V.isDefinedAndNotNull(event.eventTypeVersion)) {\r\n        ve.push(V.ensureIsVersion(event.eventTypeVersion, 'eventTypeVersion'))\r\n      }\r\n      ve.push(V.ensureIsURI(event.source, 'source'))\r\n      if (V.isDefinedAndNotNull(event.extensions)) {\r\n        ve.push(V.ensureIsObjectOrCollectionNotString(event.extensions, 'extensions'))\r\n        const extensionsSize = V.getSize(event.extensions)\r\n        if (extensionsSize < 1) {\r\n          ve.push(new Error(`The object 'extensions' must contain at least 1 property`))\r\n        }\r\n      }\r\n      ve.push(V.ensureIsDatePast(event.eventTime, 'eventTime'))\r\n      ve.push(V.ensureIsStringNotEmpty(event.contentType, 'contentType'))\r\n      ve.push(V.ensureIsURI(event.schemaURL, 'schemaURL'))\r\n    }\r\n\r\n    return ve.filter((i) => i)\r\n  }\r\n\r\n  /**\r\n   * Tell the given CloudEvent, if it's valid.\r\n   *\r\n   * See {@link CloudEvent.validateEvent}.\r\n   *\r\n   * @static\r\n   * @param {!object} event the CloudEvent to validate\r\n   * @param {object} options containing: strict (boolean, default false) to validate it in a more strict way\r\n   * @return {boolean} true if valid, otherwise false\r\n   */\r\n  static isValidEvent (event, { strict = false } = {}) {\r\n    const validationErrors = CloudEvent.validateEvent(event, { strict })\r\n    const size = V.getSize(validationErrors)\r\n    return (size === 0)\r\n  }\r\n\r\n  /**\r\n   * Serialize the given CloudEvent in JSON format.\r\n   * Note that here standard serialization to JSON is used (no additional libraries).\r\n   *\r\n   * @param {!object} event the CloudEvent to serialize\r\n   * @return {string} the serialized event, as a string\r\n   */\r\n  static serializeEvent (event) {\r\n    if (V.isUndefinedOrNull(event)) {\r\n      throw new Error('CloudEvent undefined or null')\r\n    }\r\n    if (event.contentType !== 'application/json') {\r\n      throw new Error(`Unsupported content type: '${event.contentType}'. Not yet implemented.`)\r\n    }\r\n\r\n    const serialized = JSON.stringify(event)\r\n    return serialized\r\n  }\r\n\r\n  /**\r\n   * Get the JSON Schema for a CloudEvent.\r\n   * Note that it's not used in standard serialization to JSON,\r\n   * but only in some serialization libraries.\r\n   *\r\n   * See JSON Schema.\r\n   *\r\n   * @return {object} the JSON Schema\r\n   */\r\n  static getJSONSchema () {\r\n    // define a schema for serializing a CloudEvent object to JSON\r\n    // note that properties not in the schema will be ignored\r\n    // (in json output) by some json serialization libraries, if additionalProperties is false\r\n    return {\r\n      title: 'CloudEvent Schema with required fields',\r\n      type: 'object',\r\n      properties: {\r\n        cloudEventsVersion: { type: 'string' },\r\n        eventID: { type: 'string' },\r\n        eventType: { type: 'string' },\r\n        // data: { type: 'object' },\r\n        eventTypeVersion: { type: 'string' },\r\n        source: { type: 'string' },\r\n        eventTime: { type: 'string' },\r\n        // extensions: { type: 'object' },\r\n        contentType: { type: 'string' },\r\n        // TODO: use if/then/else on contentType ... wip\r\n        schemaURL: { type: 'string' }\r\n      },\r\n      required: ['cloudEventsVersion', 'eventID', 'eventType',\r\n        'source', 'contentType'\r\n      ],\r\n      additionalProperties: true // to handle data, extensions, and maybe other (non-standard) properties\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Serialize the current CloudEvent.\r\n   *\r\n   * See {@link CloudEvent.serializeeEvent}.\r\n   *\r\n   * @return {string} the serialized event, as a string\r\n   */\r\n  serialize () {\r\n    return this.constructor.serializeEvent(this)\r\n  }\r\n\r\n  /**\r\n   * Validate the current CloudEvent.\r\n   *\r\n   * See {@link CloudEvent.validateEvent}.\r\n   *\r\n   * @param {object} options containing: strict (boolean, default false) to validate it in a more strict way\r\n   * @return {object[]} an array of (non null) validation errors, or at least an empty array\r\n   */\r\n  validate ({ strict = false } = {}) {\r\n    return this.constructor.validateEvent(this, { strict })\r\n  }\r\n\r\n  /**\r\n   * Tell the current CloudEvent, if it's valid.\r\n   *\r\n   * See {@link CloudEvent.isValidEvent}.\r\n   *\r\n   * @param {object} options containing: strict (boolean, default false) to validate it in a more strict way\r\n   * @return {boolean} true if valid, otherwise false\r\n   */\r\n  isValid ({ strict = false } = {}) {\r\n    return this.constructor.isValidEvent(this, { strict })\r\n  }\r\n\r\n  /**\r\n   * Getter method to tell if the object has the strict flag enabled.\r\n   *\r\n   * See {@link CloudEvent.isStrictEvent}.\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  get isStrict () {\r\n    return this.constructor.isStrictEvent(this)\r\n  }\r\n\r\n  /**\r\n   * Getter method to return JSON Schema for a CloudEvent.\r\n   *\r\n   * See {@link CloudEvent.getJSONSchema}.\r\n   *\r\n   * @type {object}\r\n   */\r\n  get schema () {\r\n    return this.constructor.getJSONSchema()\r\n  }\r\n\r\n  /**\r\n   * Override the usual toString method.\r\n   *\r\n   * See {@link Object.toString}.\r\n   *\r\n   * @return {string} a string representation for object instance\r\n   */\r\n  toString () {\r\n    return `CloudEvent[cloudEventsVersion: ${this.cloudEventsVersion}, ${this.constructor.dumpObject(this.eventID, 'eventID')}, ${this.constructor.dumpObject(this.eventType, 'eventType')}, ${this.constructor.dumpObject(this.data, 'data')}, ...]`\r\n  }\r\n\r\n  /**\r\n   * Gives a string valued property that is used in the creation of the default string description of an object.\r\n   *\r\n   * See {@link Symbol.toStringTag}.\r\n   *\r\n   * @return {string} a string representation of the object type\r\n   */\r\n  get [Symbol.toStringTag] () {\r\n    return 'CloudEvent'\r\n  }\r\n}\r\n\r\nmodule.exports = CloudEvent\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/src/cloudevent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "CloudEvent",
    "memberof": "src/cloudevent.js",
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent",
    "access": "public",
    "export": true,
    "importPath": "cloudevent/src/cloudevent.js",
    "importStyle": "CloudEvent",
    "description": "CloudEvent implementation.",
    "see": [
      "https://github.com/cloudevents/spec/blob/master/json-format.md"
    ],
    "lineNumber": 33,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#constructor",
    "access": "public",
    "description": "Create a new instance of a CloudEvent object.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventID",
        "description": "the ID of the event (unique), mandatory"
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventType",
        "description": "the type of the event (usually), mandatory"
      },
      {
        "nullable": false,
        "types": [
          "uri"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "the source uri of the event (use '/' if empty), mandatory"
      },
      {
        "nullable": null,
        "types": [
          "object",
          "Map",
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the real event data"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "optional attributes of the event; some has default values chosen here:\n       eventTypeVersion (string) optional,\n       eventTime (timestamp, default now),\n       extensions (object) optional but if given must contain at least 1 property (key/value),\n       contentType (string, default 'application/json') tell how the data attribute must be encoded,\n       schemaURL (uri) optional,\n       strict (boolean, default false) tell if object instance will be validated in a more strict way"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if strict is true and eventID or eventType is undefined or null"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "eventID",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#eventID",
    "access": "private",
    "description": "The event ID.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "eventType",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#eventType",
    "access": "private",
    "description": "The event type.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "source",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#source",
    "access": "private",
    "description": "The source URI of the event.",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "uri"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "data",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#data",
    "access": "private",
    "description": "The real event data.\nUsually it's an object, but could be even a Map or a Set.\nCopy the original object to avoid changing objects that could be shared.",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "object",
        "Map",
        "Set"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "cloudEventsVersion",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#cloudEventsVersion",
    "access": "private",
    "description": "The CloudEvent specification version.",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "contentType",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#contentType",
    "access": "private",
    "description": "The MIME Type for the encoding of the data attribute, when serialized.",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "eventTime",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#eventTime",
    "access": "private",
    "description": "The event timestamp.\nCopy the original object to avoid changing objects that could be shared.",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "timestamp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "eventTypeVersion",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#eventTypeVersion",
    "access": "private",
    "description": "The event version.",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "extensions",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#extensions",
    "access": "private",
    "description": "Extensions defined for the event.\nCopy the original object to avoid changing objects that could be shared.",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "schemaURL",
    "memberof": "src/cloudevent.js~CloudEvent",
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#schemaURL",
    "access": "private",
    "description": "The URL of schema for the event, if any.",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "uri"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "dumpObject",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.dumpObject",
    "access": "public",
    "description": "Utility function that return a dump of the given object.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "Map",
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to dump"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to assign in the returned string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the dump of the object or a message when obj is undefined/null/not an object"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "version",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.version",
    "access": "public",
    "description": "Return the version of the CloudEvent Specification implemented here",
    "lineNumber": 167,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the value"
    },
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "mediaType",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.mediaType",
    "access": "public",
    "description": "Return the MIME Type for a CloudEvent",
    "lineNumber": 177,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the value"
    },
    "params": []
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "isStrictEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.isStrictEvent",
    "access": "public",
    "description": "Tell if the object has the strict flag enabled.",
    "lineNumber": 189,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the CloudEvent to validate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if strict, otherwise false"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if event if undefined or null"
      }
    ]
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "validateEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.validateEvent",
    "access": "public",
    "description": "Validate the given CloudEvent.",
    "lineNumber": 208,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the CloudEvent to validate"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "containing: strict (boolean, default false) to validate it in a more strict way"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "an array of (non null) validation errors, or at least an empty array"
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "isValidEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.isValidEvent",
    "access": "public",
    "description": "Tell the given CloudEvent, if it's valid.\n\nSee {@link CloudEvent.validateEvent}.",
    "lineNumber": 264,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the CloudEvent to validate"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "containing: strict (boolean, default false) to validate it in a more strict way"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if valid, otherwise false"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "serializeEvent",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.serializeEvent",
    "access": "public",
    "description": "Serialize the given CloudEvent in JSON format.\nNote that here standard serialization to JSON is used (no additional libraries).",
    "lineNumber": 277,
    "params": [
      {
        "nullable": false,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the CloudEvent to serialize"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the serialized event, as a string"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "getJSONSchema",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cloudevent.js~CloudEvent.getJSONSchema",
    "access": "public",
    "description": "Get the JSON Schema for a CloudEvent.\nNote that it's not used in standard serialization to JSON,\nbut only in some serialization libraries.\n\nSee JSON Schema.",
    "lineNumber": 298,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the JSON Schema"
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#serialize",
    "access": "public",
    "description": "Serialize the current CloudEvent.\n\nSee {@link CloudEvent.serializeeEvent}.",
    "lineNumber": 332,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the serialized event, as a string"
    },
    "params": []
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "validate",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#validate",
    "access": "public",
    "description": "Validate the current CloudEvent.\n\nSee {@link CloudEvent.validateEvent}.",
    "lineNumber": 344,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "containing: strict (boolean, default false) to validate it in a more strict way"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "an array of (non null) validation errors, or at least an empty array"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "isValid",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#isValid",
    "access": "public",
    "description": "Tell the current CloudEvent, if it's valid.\n\nSee {@link CloudEvent.isValidEvent}.",
    "lineNumber": 356,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "containing: strict (boolean, default false) to validate it in a more strict way"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if valid, otherwise false"
    }
  },
  {
    "__docId__": 74,
    "kind": "get",
    "name": "isStrict",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#isStrict",
    "access": "public",
    "description": "Getter method to tell if the object has the strict flag enabled.\n\nSee {@link CloudEvent.isStrictEvent}.",
    "lineNumber": 367,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "get",
    "name": "schema",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#schema",
    "access": "public",
    "description": "Getter method to return JSON Schema for a CloudEvent.\n\nSee {@link CloudEvent.getJSONSchema}.",
    "lineNumber": 378,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "toString",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#toString",
    "access": "public",
    "description": "Override the usual toString method.\n\nSee {@link Object.toString}.",
    "lineNumber": 389,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a string representation for object instance"
    },
    "params": []
  },
  {
    "__docId__": 77,
    "kind": "get",
    "name": "[Symbol.toStringTag]",
    "memberof": "src/cloudevent.js~CloudEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cloudevent.js~CloudEvent#[Symbol.toStringTag]",
    "access": "public",
    "description": "Gives a string valued property that is used in the creation of the default string description of an object.\n\nSee {@link Symbol.toStringTag}.",
    "lineNumber": 400,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a string representation of the object type"
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/index.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\n/**\r\n * Get a reference to cloudevent class definition.\r\n */\r\nconst cloudEventDefinition = require('./cloudevent') // get CloudEvent definition and related utilities\r\n\r\nmodule.exports = cloudEventDefinition\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/validator.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\n/**\r\n * Validators:\r\n * this module exports some useful generic functions for the validation of objects.\r\n */\r\n\r\nconst url = require('url')\r\n\r\n/**\r\n * Generic Validator implementation.\r\n *\r\n * Note that all methods here are static, so no need to instance this class;\r\n * see it as an Utility/Companion class.\r\n */\r\nclass Validator {\r\n  /**\r\n   * Create a new instance of a Validator object.\r\n   * @throws {Error} because instancing not allowed for this class\r\n   */\r\n  constructor () {\r\n    throw new Error(`Instancing not allowed for this class`)\r\n  }\r\n\r\n  /**\r\n   * Gives a string valued property that is used in the creation of the default string description of an object.\r\n   *\r\n   * See {@link Symbol.toStringTag}.\r\n   *\r\n   * @return {string} a string representation of the object type\r\n   */\r\n  get [Symbol.toStringTag] () {\r\n    return 'Validator'\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is undefined.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if undefined, false otherwise\r\n   */\r\n  static isUndefined (arg) {\r\n    return (arg === undefined)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is null.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if null, false otherwise\r\n   */\r\n  static isNull (arg) {\r\n    return (arg === null)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is undefined or null.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if undefined or null, false otherwise\r\n   */\r\n  static isUndefinedOrNull (arg) {\r\n    return (arg === undefined || arg === null)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is defined and not null.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if defined and not null, false otherwise\r\n   */\r\n  static isDefinedAndNotNull (arg) {\r\n    return (arg !== undefined && arg !== null)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a string.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a string, false otherwise\r\n   */\r\n  static isString (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (typeof arg === 'string'))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a not empty string.\r\n   *\r\n   * See {@link Validator.isString}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a not empty string, false otherwise\r\n   */\r\n  static isStringNotEmpty (arg) {\r\n    return (Validator.isString(arg) && (arg.length > 0))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a date.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a date, false otherwise\r\n   */\r\n  static isDate (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (typeof arg === 'object' || arg instanceof Date))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a valid date.\r\n   *\r\n   * See {@link Validator.isDate}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a valid date, false otherwise\r\n   */\r\n  static isDateValid (arg) {\r\n    return (Validator.isDate(arg) && !isNaN(arg))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a valid date and in the past.\r\n   *\r\n   * See {@link Validator.isDateValid}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a valid date in the past, false otherwise\r\n   */\r\n  static isDatePast (arg) {\r\n    return (Validator.isDateValid(arg) && arg < Date.now())\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a number.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a number, false otherwise\r\n   */\r\n  static isNumber (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && typeof arg === 'number' && !isNaN(arg))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is an array.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's an array, false otherwise\r\n   */\r\n  static isArray (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (Array.isArray(arg)))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a boolean.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a boolean, false otherwise\r\n   */\r\n  static isBoolean (arg) {\r\n    return (typeof arg === 'boolean')\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is an instance of the given class reference.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {object} classReference the class that should be implemented/extended\r\n   * @return {boolean} true if it's an instance (or extends) that class, false otherwise\r\n   */\r\n  static isClass (arg, classReference) {\r\n    return (arg instanceof classReference)\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a function.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a function, false otherwise\r\n   */\r\n  static isFunction (arg) {\r\n    return (typeof arg === 'function')\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is an object.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's an object, false otherwise\r\n   */\r\n  static isObject (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (typeof arg === 'object'))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a keyed collection.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's a Map|WeakMap or a Set|WeakSet, false otherwise\r\n   */\r\n  static isKeyedCollection (arg) {\r\n    return (Validator.isDefinedAndNotNull(arg) && (\r\n      arg instanceof Map || arg instanceof WeakMap ||\r\n      arg instanceof Set || arg instanceof WeakSet\r\n    ))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is an object or a keyed collection.\r\n   *\r\n   * See {@link Validator.isObject}, {@link Validator.isKeyedCollection}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's an object or a keyed collection, false otherwise\r\n   */\r\n  static isObjectOrCollection (arg) {\r\n    return (Validator.isObject(arg) || Validator.isKeyedCollection(arg))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is an object or a keyed collection, but not a string.\r\n   *\r\n   * See {@link Validator.isObjectOrCollection}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {boolean} true if it's an object or a keyed collection but not a string, false otherwise\r\n   */\r\n  static isObjectOrCollectionNotString (arg) {\r\n    return (Validator.isObjectOrCollection(arg) && (typeof arg !== 'string'))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is a string representation of a version number.\r\n   *\r\n   * Note that the version string could be something like:\r\n   * - as minimum a number is needed for an integer version\r\n   * - at the beginning I can have an optional char 'v' or 'V'\r\n   * - anything after the third number will be considered as a string\r\n   * - format updated to handle version output of 'git describe'\r\n   *\r\n   * @static\r\n   * @param {string} arg the version string to check\r\n   * @return {boolean} true if it's a version string, false otherwise\r\n   */\r\n  static isVersion (arg) {\r\n    // quick check if the given string is in the format 'n.n.n'\r\n    const versionRegex = /^(?:v|V?)((\\d+)(?:\\.?)){1,3}(?:\\W|_?)(.*)$/gm\r\n    return (Validator.isStringNotEmpty(arg) && versionRegex.test(arg))\r\n  }\r\n\r\n  /**\r\n   * Tell if the given ergument is an URI or an URL.\r\n   *\r\n   * @static\r\n   * @param {string} arg the uri/url to check\r\n   * @param {string} base the (optional) base to build the full URL\r\n   * @return {boolean} true if it's an URI/URL, false otherwise\r\n   */\r\n  static isURI (arg, base) {\r\n    // quick check if the given string is an URI or an URL\r\n    if (!Validator.isStringNotEmpty(arg)) {\r\n      return false\r\n    }\r\n    // simple check if it's an URL, trying to instancing it\r\n    // note that this requires to import related module here (but not in Browsers) ...\r\n    if (Validator.isStringNotEmpty(base)) {\r\n      try {\r\n        const u = new url.URL(arg, base)\r\n        return (u !== null)\r\n      } catch (e) {\r\n        // console.error(e)\r\n        return false\r\n      }\r\n    } else {\r\n      // simple check if it's an URI (or better, a relative URL)\r\n      if (arg.startsWith('/')) {\r\n        return true\r\n      }\r\n      try {\r\n        // return (new URL(arg) !== null)\r\n        const u = new url.URL(arg)\r\n        return (u !== null)\r\n      } catch (e) {\r\n        // console.error(e)\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given ergument is an instance of the given class reference.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {object} classReference the class that should be implemented/extended\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not an instance (or extends) that class, nothing otherwise\r\n   */\r\n  static ensureIsClass (arg, classReference, name) {\r\n    if (!Validator.isClass(arg, classReference)) {\r\n      return new TypeError(`The argument '${name}' must be an instance of the given class reference, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given ergument is a function.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not an instance (or extends) that class, nothing otherwise\r\n   */\r\n  static ensureIsFunction (arg, name) {\r\n    if (!Validator.isFunction(arg)) {\r\n      return new TypeError(`The argument '${name}' must be a function, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a string.\r\n   *\r\n   * See {@link Validator.isString}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not a string, nothing otherwise\r\n   */\r\n  static ensureIsString (arg, name) {\r\n    if (!Validator.isString(arg)) {\r\n      return new TypeError(`The argument '${name}' must be a string, instead got a '${typeof arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a not empty string.\r\n   *\r\n   * See {@link Validator.isStringNotEmpty}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not a not empty string, nothing otherwise\r\n   */\r\n  static ensureIsStringNotEmpty (arg, name) {\r\n    if (!Validator.isStringNotEmpty(arg)) {\r\n      return new Error(`The string '${name}' must be not empty`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia an object or a collection.\r\n   *\r\n   * See {@link Validator.isObjectOrCollection}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not an object nor a collection, nothing otherwise\r\n   */\r\n  static ensureIsObjectOrCollection (arg, name) {\r\n    if (!Validator.isObjectOrCollection(arg)) {\r\n      return new TypeError(`The object '${name}' must be an object or a collection`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia an object or a collection, not a string.\r\n   *\r\n   * See {@link Validator.isObjectOrCollectionNotString}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {TypeError} if it's not an object nor a collection, nothing otherwise\r\n   */\r\n  static ensureIsObjectOrCollectionNotString (arg, name) {\r\n    if (!Validator.isObjectOrCollectionNotString(arg)) {\r\n      return new TypeError(`The object '${name}' must be an object or a collection, and not a string`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a date.\r\n   *\r\n   * See {@link Validator.isDate}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not a date, nothing otherwise\r\n   */\r\n  static ensureIsDate (arg, name) {\r\n    if (!Validator.isDate(arg)) {\r\n      return new Error(`The object '${name}' must be a Date`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a date in the past.\r\n   *\r\n   * See {@link Validator.isDatePast}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not a date in the past, nothing otherwise\r\n   */\r\n  static ensureIsDatePast (arg, name) {\r\n    if (!Validator.isDatePast(arg)) {\r\n      return new Error(`The object '${name}' must be a Date that belongs to the past`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia a string version.\r\n   *\r\n   * See {@link Validator.isVersion}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not a string version, nothing otherwise\r\n   */\r\n  static ensureIsVersion (arg, name) {\r\n    if (!Validator.isVersion(arg)) {\r\n      return new Error(`The object '${name}' must be a string in the format 'n.n.n', and not '${arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that the given argument ia an URI/URL.\r\n   *\r\n   * See {@link Validator.isURI}.\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @param {string} name the name to use in generated error (if any)\r\n   * @return {Error} if it's not an URI/URL, nothing otherwise\r\n   */\r\n  static ensureIsURI (arg, name) {\r\n    if (!Validator.isURI(arg)) {\r\n      return new Error(`The object '${name}' must be an URI or URL string, and not '${arg}'`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tell the size of the given aobject\r\n   *\r\n   * @static\r\n   * @param {object} arg the object to check\r\n   * @return {number} the size if it's an array|Map|Set|object|string, nothing otherwise\r\n   */\r\n  static getSize (arg) {\r\n    if ((arg === undefined || arg === null)) {\r\n      return\r\n    }\r\n    if (Array.isArray(arg)) {\r\n      return arg.length\r\n    } else if (arg instanceof Map || arg instanceof Set) {\r\n      return arg.size\r\n    } else if (typeof arg === 'object') {\r\n      return Object.keys(arg).length\r\n    } else if (typeof arg === 'string') {\r\n      return arg.length\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Validator\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/src/validator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "Validator",
    "memberof": "src/validator.js",
    "static": true,
    "longname": "src/validator.js~Validator",
    "access": "public",
    "export": true,
    "importPath": "cloudevent/src/validator.js",
    "importStyle": "Validator",
    "description": "Generic Validator implementation.\n\nNote that all methods here are static, so no need to instance this class;\nsee it as an Utility/Companion class.",
    "lineNumber": 31,
    "interface": false
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validator.js~Validator#constructor",
    "access": "public",
    "description": "Create a new instance of a Validator object.",
    "lineNumber": 36,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "because instancing not allowed for this class"
      }
    ]
  },
  {
    "__docId__": 82,
    "kind": "get",
    "name": "[Symbol.toStringTag]",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validator.js~Validator#[Symbol.toStringTag]",
    "access": "public",
    "description": "Gives a string valued property that is used in the creation of the default string description of an object.\n\nSee {@link Symbol.toStringTag}.",
    "lineNumber": 47,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a string representation of the object type"
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "isUndefined",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isUndefined",
    "access": "public",
    "description": "Tell if the given ergument is undefined.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if undefined, false otherwise"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "isNull",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isNull",
    "access": "public",
    "description": "Tell if the given ergument is null.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if null, false otherwise"
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "isUndefinedOrNull",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isUndefinedOrNull",
    "access": "public",
    "description": "Tell if the given ergument is undefined or null.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if undefined or null, false otherwise"
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "isDefinedAndNotNull",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isDefinedAndNotNull",
    "access": "public",
    "description": "Tell if the given ergument is defined and not null.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if defined and not null, false otherwise"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "isString",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isString",
    "access": "public",
    "description": "Tell if the given ergument is a string.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a string, false otherwise"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "isStringNotEmpty",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isStringNotEmpty",
    "access": "public",
    "description": "Tell if the given ergument is a not empty string.\n\nSee {@link Validator.isString}.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a not empty string, false otherwise"
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "isDate",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isDate",
    "access": "public",
    "description": "Tell if the given ergument is a date.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a date, false otherwise"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "isDateValid",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isDateValid",
    "access": "public",
    "description": "Tell if the given ergument is a valid date.\n\nSee {@link Validator.isDate}.",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a valid date, false otherwise"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "isDatePast",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isDatePast",
    "access": "public",
    "description": "Tell if the given ergument is a valid date and in the past.\n\nSee {@link Validator.isDateValid}.",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a valid date in the past, false otherwise"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "isNumber",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isNumber",
    "access": "public",
    "description": "Tell if the given ergument is a number.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a number, false otherwise"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "isArray",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isArray",
    "access": "public",
    "description": "Tell if the given ergument is an array.",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an array, false otherwise"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "isBoolean",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isBoolean",
    "access": "public",
    "description": "Tell if the given ergument is a boolean.",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a boolean, false otherwise"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "isClass",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isClass",
    "access": "public",
    "description": "Tell if the given ergument is an instance of the given class reference.",
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "classReference",
        "description": "the class that should be implemented/extended"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an instance (or extends) that class, false otherwise"
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "isFunction",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isFunction",
    "access": "public",
    "description": "Tell if the given ergument is a function.",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a function, false otherwise"
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "isObject",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isObject",
    "access": "public",
    "description": "Tell if the given ergument is an object.",
    "lineNumber": 219,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an object, false otherwise"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "isKeyedCollection",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isKeyedCollection",
    "access": "public",
    "description": "Tell if the given ergument is a keyed collection.",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a Map|WeakMap or a Set|WeakSet, false otherwise"
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "isObjectOrCollection",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isObjectOrCollection",
    "access": "public",
    "description": "Tell if the given ergument is an object or a keyed collection.\n\nSee {@link Validator.isObject}, {@link Validator.isKeyedCollection}.",
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an object or a keyed collection, false otherwise"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "isObjectOrCollectionNotString",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isObjectOrCollectionNotString",
    "access": "public",
    "description": "Tell if the given ergument is an object or a keyed collection, but not a string.\n\nSee {@link Validator.isObjectOrCollection}.",
    "lineNumber": 259,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an object or a keyed collection but not a string, false otherwise"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "isVersion",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isVersion",
    "access": "public",
    "description": "Tell if the given ergument is a string representation of a version number.\n\nNote that the version string could be something like:\n- as minimum a number is needed for an integer version\n- at the beginning I can have an optional char 'v' or 'V'\n- anything after the third number will be considered as a string\n- format updated to handle version output of 'git describe'",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the version string to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's a version string, false otherwise"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "isURI",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.isURI",
    "access": "public",
    "description": "Tell if the given ergument is an URI or an URL.",
    "lineNumber": 290,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the uri/url to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "the (optional) base to build the full URL"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if it's an URI/URL, false otherwise"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "ensureIsClass",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsClass",
    "access": "public",
    "description": "Ensure that the given ergument is an instance of the given class reference.",
    "lineNumber": 330,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "classReference",
        "description": "the class that should be implemented/extended"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not an instance (or extends) that class, nothing otherwise"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "ensureIsFunction",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsFunction",
    "access": "public",
    "description": "Ensure that the given ergument is a function.",
    "lineNumber": 344,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not an instance (or extends) that class, nothing otherwise"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "ensureIsString",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsString",
    "access": "public",
    "description": "Ensure that the given argument ia a string.\n\nSee {@link Validator.isString}.",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not a string, nothing otherwise"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "ensureIsStringNotEmpty",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsStringNotEmpty",
    "access": "public",
    "description": "Ensure that the given argument ia a not empty string.\n\nSee {@link Validator.isStringNotEmpty}.",
    "lineNumber": 376,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not a not empty string, nothing otherwise"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "ensureIsObjectOrCollection",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsObjectOrCollection",
    "access": "public",
    "description": "Ensure that the given argument ia an object or a collection.\n\nSee {@link Validator.isObjectOrCollection}.",
    "lineNumber": 392,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not an object nor a collection, nothing otherwise"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "ensureIsObjectOrCollectionNotString",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsObjectOrCollectionNotString",
    "access": "public",
    "description": "Ensure that the given argument ia an object or a collection, not a string.\n\nSee {@link Validator.isObjectOrCollectionNotString}.",
    "lineNumber": 408,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TypeError"
      ],
      "spread": false,
      "description": "if it's not an object nor a collection, nothing otherwise"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "ensureIsDate",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsDate",
    "access": "public",
    "description": "Ensure that the given argument ia a date.\n\nSee {@link Validator.isDate}.",
    "lineNumber": 424,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not a date, nothing otherwise"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "ensureIsDatePast",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsDatePast",
    "access": "public",
    "description": "Ensure that the given argument ia a date in the past.\n\nSee {@link Validator.isDatePast}.",
    "lineNumber": 440,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not a date in the past, nothing otherwise"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "ensureIsVersion",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsVersion",
    "access": "public",
    "description": "Ensure that the given argument ia a string version.\n\nSee {@link Validator.isVersion}.",
    "lineNumber": 456,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not a string version, nothing otherwise"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "ensureIsURI",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.ensureIsURI",
    "access": "public",
    "description": "Ensure that the given argument ia an URI/URL.\n\nSee {@link Validator.isURI}.",
    "lineNumber": 472,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name to use in generated error (if any)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "if it's not an URI/URL, nothing otherwise"
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "getSize",
    "memberof": "src/validator.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator.js~Validator.getSize",
    "access": "public",
    "description": "Tell the size of the given aobject",
    "lineNumber": 485,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": "the object to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the size if it's an array|Map|Set|object|string, nothing otherwise"
    }
  },
  {
    "kind": "index",
    "content": "# cloudevent.js\n\n  [![NPM Version](https://img.shields.io/npm/v/cloudevent.svg?style=flat)](https://npmjs.org/package/cloudevent/)\n  [![NPM Downloads](https://img.shields.io/npm/dm/cloudevent.svg?style=flat)](https://npmjs.org/package/cloudevent/)\n  [![Code Style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/)\n  [![Coverage Status](https://coveralls.io/repos/github/smartiniOnGitHub/cloudevent.js/badge.svg?branch=master)](https://coveralls.io/github/smartiniOnGitHub/cloudevent.js/?branch=master)\n  [![Dependencies](https://david-dm.org/smartiniOnGitHub/cloudevent.js.svg)](https://david-dm.org/smartiniOnGitHub/cloudevent.js.svg)\n\nJavaScript/Node.js implementation of [CloudEvents](http://cloudevents.io/)\n\nThe purpose of this library is to create instances of CloudEvents in a simple way (with some useful defaults), \nor in a full way (all attributes).\nOptional, it's possible to validate created instances to be sure they are compliant with the standard.\n\nThen, created instances can be serialized, for example to be sent (or saved/stored) somewhere.\n\nNote that many features are exposed directly from the CloudEvent class with standard class instance methods, and even as class static methods (that operates on a given CloudEvent).\n\nMore features will follow.\n\n\n## Usage\n\nGet a reference to the library:\n\n```js\n// Node.js example\n\nconst CloudEvent = require('cloudevent')\n```\n\ncreate some sample CloudEvent instances:\n\n```js\n// create some sample instances but without mandatory fields (for validation) ...\nconst ceEmpty = new CloudEvent() // create an empty CloudEvent instance (not valid for the validator, even in default case, when strict mode flag is disabled)\nconst ceMinimalMandatoryUndefinedNoStrict = new CloudEvent(undefined, undefined, undefined, undefined, { strict: false }) // expected success\nconst ceMinimalMandatoryUndefinedStrict = new CloudEvent(undefined, undefined, undefined, undefined, { strict: true }) // expected failure, so ceMinimalMandatoryUndefinedStrict will not be defined\n\n// create some sample minimal instances, good even for validation ...\nconst ceMinimal = new CloudEvent('1', // eventID\n  'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\n  '/', // source\n  {} // data (empty) // optional, but useful the same in this sample usage\n)\n\n// create some instance with all attributes ...\n// define some common attributes\nconst ceCommonOptions = {\n  eventTypeVersion: '1.0.0',\n  eventTime: new Date(),\n  extensions: { 'exampleExtension': 'value' },\n  contentType: 'application/json',\n  schemaURL: 'http://my-schema.localhost.localdomain',\n  strict: false // same as default\n}\nconst ceCommonOptionsStrict = { ...ceCommonOptions, strict: true }\n// create some instances with an undefined mandatory argument (handled by defaults), but with strict flag disabled: expected success ...\n// note that null values are not handled by default values, only undefined values ...\nconst ceFull = new CloudEvent('1/full',\n  'com.github.smartiniOnGitHub.cloudeventjs.testevent',\n  '/test',\n  { 'hello': 'world', year: 2018 }, // data\n  ceCommonOptions\n)\nconst ceFullStrict = new CloudEvent('2/full-strict',\n  'com.github.smartiniOnGitHub.cloudeventjs.testevent',\n  '/test',\n  { 'hello': 'world', year: 2018 }, // data\n  ceCommonOptionsStrict // use common options, but set strict mode to true\n)\nassert(ceFullStrict.isStrict)\nassert(!ceFull.isStrict) // ensure common options object has not been changed when reusing some of its values for the second instance\nassert(!CloudEvent.isStrictEvent(ceFull)) // the same, but using static method\n\n```\n\noptional, do some validations/checks on created instances.\nAs sample, use class static methods like 'isValidEvent' and 'ValidateEvent', or instance methods like 'isValid', 'validate', etc ...\n\n```js\nassert(!ceEmpty.isValid())\nassert(!ceMinimalMandatoryUndefinedNoStrict.isValid())\nassert(ceMinimal.isValid())\nassert(ceFull.isValid())\nassert(ceFullStrict.isValid())\n// the same, but using static method\nassert(!CloudEvent.isValidEvent(ceEmpty))\nassert(!CloudEvent.isValidEvent(ceMinimalMandatoryUndefinedNoStrict))\nassert(CloudEvent.isValidEvent(ceMinimal))\nassert(CloudEvent.isValidEvent(ceFull))\nassert(CloudEvent.isValidEvent(ceFullStrict))\nassert(CloudEvent.validateEvent(ceEmpty).length > 0)\nassert(CloudEvent.validateEvent(ceEmpty, { strict: true }).length > 0)\nassert(CloudEvent.validateEvent(ceMinimalMandatoryUndefinedNoStrict).length > 0)\nassert(CloudEvent.validateEvent(ceMinimal).length === 0)\nassert(CloudEvent.validateEvent(ceFull).length === 0)\nassert(CloudEvent.validateEvent(ceFull, { strict: false }).length === 0)\nassert(CloudEvent.validateEvent(ceFull, { strict: true }).length === 0)\nassert(CloudEvent.validateEvent(ceFullStrict).length === 0)\nassert(CloudEvent.validateEvent(ceFullStrict, { strict: false }).length === 0)\nassert(CloudEvent.validateEvent(ceFullStrict, { strict: true }).length === 0)\n\nconsole.log(`Validation on ceEmpty: isValid: ${ceEmpty.isValid()}, `)\n\nconsole.log(`Validation output for ceEmpty, default strict mode is: size: ${CloudEvent.validateEvent(ceEmpty).length}, details:\\n` + CloudEvent.validateEvent(ceEmpty))\nconsole.log(`Validation output for ceEmpty, force strict mode to true is size: ${CloudEvent.validateEvent(ceEmpty, { strict: true }).length}, details:\\n` + CloudEvent.validateEvent(ceEmpty, { strict: true }))\n```\n\nserialization examples:\n\n```js\nconst ceFullSerializedStatic = CloudEvent.serializeEvent(ceFull)\nconst ceFullSerialized = ceFull.serialize()\nconsole.log(`Serialization output for ceFull, details:\\n` + ceFullSerialized)\n\n// then use (send/store/etc) serialized instances ...\n\n```\n\nLook into the [example](./example/) folder for more sample scripts that uses the library (inline but it's the same using it from npm registry).\n\n\n## Requirements\n\nNode.js 8.14.x or later.\n\n\n## Note\n\nNote that in this implementation there is even the ability to validate CloudEvent instances in a stricter way, by setting to true the attribute 'strict' in options in constructor options; or specify it during validation.\nThat attribute when set will be put in the 'extensions' standard attribute of a CloudEvent.\n\nYou can find Code Documentation for the API of the library [here](https://smartiniongithub.github.io/cloudevent.js/).\n\nSee the CloudEvents Specification [here](https://github.com/cloudevents/spec).\n\nThe package name 'cloudevent.js' is changed just after the '0.2.0' release \nto the simpler 'cloudevent' (published the same as '0.2.0' release),\nso it will be easier to get it at npm.\n\n\n## Contributing\n\n1. Fork it ( https://github.com/smartiniOnGitHub/cloudevent.js/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n\n## License\n\nLicensed under [Apache-2.0](./LICENSE).\n\n----\n",
    "longname": "/Users/martinis/work/prove/cloudevent.js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"cloudevent\",\n  \"version\": \"0.2.1\",\n  \"description\": \"JavaScript/Node.js implementation of the CloudEvents standard format\",\n  \"main\": \"src/index\",\n  \"scripts\": {\n    \"docs\": \"npx esdoc\",\n    \"example\": \"node example/nodejs-base\",\n    \"lint\": \"standard \\\"./*.js\\\" \\\"./src/**/*.js\\\" \\\"./test/**/*.test.js\\\" \\\"./example/**/*.js\\\"\",\n    \"test:unit\": \"tap -J test/*.test.js test/*/*.test.js\",\n    \"test\": \"npm run lint && npm run test:unit\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-node\": \"^1.0.4\",\n    \"simple-get\": \"^3.0.3\",\n    \"standard\": \"^12.0.1\",\n    \"tap\": \"^12.1.1\"\n  },\n  \"peerDependencies\": {},\n  \"engines\": {\n    \"node\": \">=8.14.0\"\n  },\n  \"homepage\": \"https://github.com/smartiniOnGitHub/cloudevent.js#readme\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/smartiniOnGitHub/cloudevent.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/smartiniOnGitHub/cloudevent.js/issues\"\n  },\n  \"keywords\": [\n    \"library\",\n    \"cloudevents\"\n  ],\n  \"author\": \"Sandro Martini <sandro.martini@gmail.com>\",\n  \"license\": \"Apache-2.0\"\n}\n",
    "longname": "/Users/martinis/work/prove/cloudevent.js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 114,
    "kind": "testFile",
    "name": "test/cloudevent-serialization.test.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\nconst assert = require('assert')\r\nconst test = require('tap').test\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure decorator functions (exposed by the plugin) exists', (t) => {\r\n  t.plan(6)\r\n\r\n  const CloudEvent = require('../src/') // reference the library\r\n  // optional, using some standard Node.js assert statements, as a sample\r\n  assert(CloudEvent !== null)\r\n  assert.strictEqual(typeof CloudEvent, 'function')\r\n  assert(new CloudEvent() instanceof CloudEvent)\r\n  assert.strictEqual(CloudEvent.mediaType(), 'application/cloudevents+json')\r\n  t.ok(CloudEvent)\r\n  t.strictEqual(typeof CloudEvent, 'function')\r\n  t.strictEqual(new CloudEvent() instanceof CloudEvent, true)\r\n  t.strictEqual(CloudEvent.mediaType(), 'application/cloudevents+json')\r\n\r\n  const ceSerialize = CloudEvent.serializeEvent\r\n  assert(ceSerialize !== null)\r\n  assert(typeof ceSerialize === 'function')\r\n  t.ok(ceSerialize)\r\n  t.strictEqual(typeof ceSerialize, 'function')\r\n})\r\n\r\n/** create some common options, for better reuse in tests */\r\nconst commonEventTime = new Date()\r\nconst ceCommonOptions = {\r\n  eventTypeVersion: '1.0.0',\r\n  eventTime: commonEventTime,\r\n  extensions: { 'exampleExtension': 'value' },\r\n  contentType: 'application/json',\r\n  schemaURL: 'http://my-schema.localhost.localdomain',\r\n  strict: false\r\n}\r\n/** create some common options with strict flag enabled, for better reuse in tests */\r\nconst ceCommonOptionsStrict = { ...ceCommonOptions, strict: true }\r\n/** create some common data from an object, for better reuse in tests */\r\nconst ceCommonData = { 'hello': 'world', year: 2018 }\r\n/** create some common data from a Map, for better reuse in tests */\r\nconst ceMapData = new Map() // empty Map\r\n// const ceMapData = new Map(['key-1', 'value 1'], ['key-2', 'value 2'])\r\nceMapData.set('key-1', 'value 1')\r\nceMapData.set('key-2', 'value 2')\r\n\r\n/** @test {CloudEvent} */\r\ntest('serialize some CloudEvent instances to JSON, and ensure they are right', (t) => {\r\n  t.plan(36)\r\n\r\n  const CloudEvent = require('../src/') // reference the library\r\n  // t.ok(CloudEvent)\r\n\r\n  // create an instance with undefined data attribute, but with strict flag disabled: expected success ...\r\n  // note that null values are not handled by default values, only undefined values ...\r\n  const ceFull = new CloudEvent('1/full/sample-data/no-strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    ceCommonData, // data\r\n    ceCommonOptions\r\n  )\r\n  assert(ceFull !== null)\r\n  t.ok(ceFull)\r\n  t.ok(ceFull.isValid())\r\n  t.ok(ceFull.validate().length === 0)\r\n  t.ok(ceFull.validate({ strict: false }).length === 0)\r\n  t.ok(ceFull.validate({ strict: true }).length === 0)\r\n  t.ok(CloudEvent.isValidEvent(ceFull))\r\n  t.ok(CloudEvent.validateEvent(ceFull).length === 0)\r\n  t.ok(CloudEvent.validateEvent(ceFull, { strict: false }).length === 0)\r\n  t.ok(CloudEvent.validateEvent(ceFull, { strict: true }).length === 0)\r\n\r\n  const ceFullSerializedStatic = CloudEvent.serializeEvent(ceFull)\r\n  t.ok(ceFullSerializedStatic)\r\n  const ceFullSerialized = ceFull.serialize()\r\n  t.ok(ceFullSerialized)\r\n  assert(ceFullSerializedStatic === ceFullSerialized)\r\n  t.strictSame(ceFullSerializedStatic, ceFullSerialized)\r\n  const ceSerialize = CloudEvent.serializeEvent\r\n  assert(ceSerialize !== null)\r\n  t.ok(ceSerialize)\r\n  const ceFullSerializedFunction = ceSerialize(ceFull)\r\n  t.ok(ceFullSerializedFunction)\r\n  t.strictSame(ceFullSerializedFunction, ceFullSerializedStatic)\r\n  t.strictSame(ceFullSerializedFunction, ceFullSerialized)\r\n\r\n  const ceFullSerializedComparison = `{\"eventID\":\"1/full/sample-data/no-strict\",\"eventType\":\"com.github.smartiniOnGitHub.cloudeventjs.testevent\",\"source\":\"/test\",\"data\":{\"hello\":\"world\",\"year\":2018},\"cloudEventsVersion\":\"0.1\",\"contentType\":\"application/json\",\"eventTime\":\"${commonEventTime.toISOString()}\",\"eventTypeVersion\":\"1.0.0\",\"extensions\":{\"exampleExtension\":\"value\"},\"schemaURL\":\"http://my-schema.localhost.localdomain\"}`\r\n  t.strictSame(ceFullSerialized, ceFullSerializedComparison)\r\n  const ceFullDeserialized = JSON.parse(ceFullSerialized) // note that some fields (like dates) will be different when deserialized in this way ...\r\n  ceFullDeserialized.eventTime = commonEventTime // quick fix for the Date/timestamo attribute in the deserialized object\r\n  t.same(ceFull, ceFullDeserialized)\r\n\r\n  // the same with with strict mode enabled ...\r\n  const ceFullStrict = new CloudEvent('1/full/sample-data/strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    ceCommonData, // data\r\n    ceCommonOptionsStrict\r\n  )\r\n  assert(ceFullStrict !== null)\r\n  t.ok(ceFullStrict)\r\n  t.ok(ceFullStrict.isValid())\r\n  t.ok(ceFullStrict.validate().length === 0)\r\n  t.ok(ceFullStrict.validate({ strict: true }).length === 0)\r\n  t.ok(ceFullStrict.validate({ strict: false }).length === 0)\r\n  t.ok(CloudEvent.isValidEvent(ceFullStrict))\r\n  t.ok(CloudEvent.validateEvent(ceFullStrict).length === 0)\r\n  t.ok(CloudEvent.validateEvent(ceFullStrict, { strict: true }).length === 0)\r\n  t.ok(CloudEvent.validateEvent(ceFullStrict, { strict: false }).length === 0)\r\n\r\n  const ceFullStrictSerializedStatic = CloudEvent.serializeEvent(ceFullStrict)\r\n  t.ok(ceFullStrictSerializedStatic)\r\n  const ceFullStrictSerialized = ceFullStrict.serialize()\r\n  t.ok(ceFullStrictSerialized)\r\n  assert(ceFullStrictSerializedStatic === ceFullStrictSerialized)\r\n  t.strictSame(ceFullStrictSerializedStatic, ceFullStrictSerialized)\r\n  // const ceSerialize = CloudEvent.serializeEvent\r\n  assert(ceSerialize !== null)\r\n  t.ok(ceSerialize)\r\n  const ceFullStrictSerializedFunction = ceSerialize(ceFullStrict)\r\n  t.ok(ceFullStrictSerializedFunction)\r\n  t.strictSame(ceFullStrictSerializedFunction, ceFullStrictSerializedStatic)\r\n  t.strictSame(ceFullStrictSerializedFunction, ceFullStrictSerialized)\r\n\r\n  const ceFullStrictSerializedComparison = `{\"eventID\":\"1/full/sample-data/strict\",\"eventType\":\"com.github.smartiniOnGitHub.cloudeventjs.testevent\",\"source\":\"/test\",\"data\":{\"hello\":\"world\",\"year\":2018},\"cloudEventsVersion\":\"0.1\",\"contentType\":\"application/json\",\"eventTime\":\"${commonEventTime.toISOString()}\",\"eventTypeVersion\":\"1.0.0\",\"extensions\":{\"exampleExtension\":\"value\",\"strict\":true},\"schemaURL\":\"http://my-schema.localhost.localdomain\"}`\r\n  t.strictSame(ceFullStrictSerialized, ceFullStrictSerializedComparison)\r\n  const ceFullStrictDeserialized = JSON.parse(ceFullStrictSerialized) // note that some fields (like dates) will be different when deserialized in this way ...\r\n  ceFullStrictDeserialized.eventTime = commonEventTime // quick fix for the Date/timestamo attribute in the deserialized object\r\n  t.same(ceFullStrict, ceFullStrictDeserialized)\r\n})\r\n\r\n// TODO: this is a limit if the current implementation, and will be resolved soon ... wip\r\n/** @test {CloudEvent} */\r\ntest('serialize a CloudEvent instance with a non default contentType, expect error', (t) => {\r\n  t.plan(4)\r\n\r\n  const CloudEvent = require('../src/') // reference the library\r\n  t.ok(CloudEvent)\r\n\r\n  // create an instance with non default contentType (other options default): expected success ...\r\n  // but when I try to serialize it, expect to have an error raised ...\r\n  const ceFullOtherContentType = new CloudEvent('1/non-default-contentType/sample-data/no-strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    ceCommonData, // data\r\n    {\r\n      contentType: 'application/xml'\r\n    }\r\n  )\r\n  assert(ceFullOtherContentType !== null)\r\n  t.ok(ceFullOtherContentType)\r\n  t.ok(ceFullOtherContentType.isValid())\r\n  // const ceFullStrictSerialized = ceFullOtherContentType.serialize()\r\n  // t.ok(ceFullStrictSerialized)\r\n  t.throws(function () {\r\n    const ceFullStrictSerialized = ceFullOtherContentType.serialize()\r\n    assert(ceFullStrictSerialized === null) // never executed\r\n  }, Error, 'Expected exception when serializing the current CloudEvent instance')\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure the JSON Schema for a CloudEvent (static and for a normal instance) is available', (t) => {\r\n  t.plan(6)\r\n\r\n  const CloudEvent = require('../src/') // reference the library\r\n  t.ok(CloudEvent)\r\n\r\n  // get JSON Schema from a static method\r\n  const jsonSchemaStatic = CloudEvent.getJSONSchema()\r\n  assert(jsonSchemaStatic !== null)\r\n  t.ok(jsonSchemaStatic)\r\n  t.strictEqual(typeof jsonSchemaStatic, 'object')\r\n\r\n  // create a sample CloudEvent instance ...\r\n  const ceFullStrict = new CloudEvent('1/full/sample-data/strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    ceCommonData, // data\r\n    ceCommonOptionsStrict\r\n  )\r\n  assert(ceFullStrict !== null)\r\n  t.ok(ceFullStrict)\r\n  // get JSON Schema from that instance\r\n  const jsonSchema = ceFullStrict.schema\r\n  assert(jsonSchema !== null)\r\n  t.ok(jsonSchema)\r\n  t.strictEqual(typeof jsonSchema, 'object')\r\n})\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/test/cloudevent-serialization.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "test0",
    "testId": 0,
    "memberof": "test/cloudevent-serialization.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent-serialization.test.js~test0",
    "access": null,
    "description": "ensure decorator functions (exposed by the plugin) exists",
    "lineNumber": 22,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "test1",
    "testId": 1,
    "memberof": "test/cloudevent-serialization.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent-serialization.test.js~test1",
    "access": null,
    "description": "serialize some CloudEvent instances to JSON, and ensure they are right",
    "lineNumber": 64,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "test2",
    "testId": 2,
    "memberof": "test/cloudevent-serialization.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent-serialization.test.js~test2",
    "access": null,
    "description": "serialize a CloudEvent instance with a non default contentType, expect error",
    "lineNumber": 150,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "test3",
    "testId": 3,
    "memberof": "test/cloudevent-serialization.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent-serialization.test.js~test3",
    "access": null,
    "description": "ensure the JSON Schema for a CloudEvent (static and for a normal instance) is available",
    "lineNumber": 178,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 119,
    "kind": "testFile",
    "name": "test/cloudevent.test.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\nconst assert = require('assert')\r\nconst test = require('tap').test\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure the CloudEvent class is exported by the library', (t) => {\r\n  t.plan(4)\r\n  const CloudEvent = require('../src/') // reference the library\r\n  // optional, using some standard Node.js assert statements, as a sample\r\n  assert(CloudEvent !== null)\r\n  assert.strictEqual(typeof CloudEvent, 'function')\r\n  assert(new CloudEvent() instanceof CloudEvent)\r\n  assert.strictEqual(CloudEvent.mediaType(), 'application/cloudevents+json')\r\n  t.ok(CloudEvent)\r\n  t.strictEqual(typeof CloudEvent, 'function')\r\n  t.strictEqual(new CloudEvent() instanceof CloudEvent, true)\r\n  t.strictEqual(CloudEvent.mediaType(), 'application/cloudevents+json')\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure isValid and validate works good on undefined and null objects', (t) => {\r\n  t.plan(7)\r\n  const CloudEvent = require('../src/') // reference the library\r\n  t.ok(CloudEvent)\r\n\r\n  // undefined\r\n  t.notOk()\r\n  t.notOk(CloudEvent.isValidEvent())\r\n  t.strictSame(CloudEvent.validateEvent(), [new Error('CloudEvent undefined or null')])\r\n\r\n  // null\r\n  t.notOk(null)\r\n  t.notOk(CloudEvent.isValidEvent(null))\r\n  t.strictSame(CloudEvent.validateEvent(null), [new Error('CloudEvent undefined or null')])\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('create some CloudEvent instances (empty, without minimal arguments set or not set) and ensure they are different objects', (t) => {\r\n  t.plan(11)\r\n  const CloudEvent = require('../src/') // reference the library\r\n  t.ok(CloudEvent)\r\n\r\n  // create an instance without mandatory arguments (but no strict mode): expected success ...\r\n  const ceEmpty = new CloudEvent()\r\n  t.ok(ceEmpty)\r\n  t.ok(!CloudEvent.isValidEvent(ceEmpty))\r\n  // t.strictSame(CloudEvent.validateEvent(ceEmpty), []) // temp, to see the error during development ...\r\n  t.strictSame(CloudEvent.validateEvent(ceEmpty).length, 3) // simplify comparison of results, check only the  number of expected errors ...\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(!ceEmpty.isValid())\r\n  t.strictSame(ceEmpty.validate(ceEmpty).length, 3) // simplify comparison of results, check only the  number of expected errors ...\r\n\r\n  // create an instance without mandatory arguments (but with strict mode): expected failure ...\r\n  let ceEmpty2 = null\r\n  try {\r\n    ceEmpty2 = new CloudEvent(undefined, undefined, undefined, undefined, { strict: true })\r\n    assert(ceEmpty2 === null) // never executed\r\n  } catch (e) {\r\n    t.ok(e) // expected error here\r\n    t.ok(!CloudEvent.isValidEvent(ceEmpty2))\r\n    t.strictSame(CloudEvent.validateEvent(ceEmpty2), [new Error('CloudEvent undefined or null')])\r\n    // the same but using normal instance methods, to ensure they works good ... no because here instance is null\r\n  }\r\n  t.equal(ceEmpty2, null)\r\n  // the same test, but in a shorter form ...\r\n  t.throws(function () {\r\n    const ce = new CloudEvent(undefined, undefined, undefined, undefined, { strict: true })\r\n    assert(ce === null) // never executed\r\n  }, Error, 'Expected exception when creating a CloudEvent without mandatory arguments with strict flag enabled')\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('create some CloudEvent instances (with minimal fields set) and ensure they are different objects', (t) => {\r\n  t.plan(40)\r\n  const CloudEvent = require('../src/') // reference the library\r\n  t.ok(CloudEvent)\r\n\r\n  // t.notSame(CloudEvent.isValidEvent, CloudEvent.validateEvent)\r\n  t.strictNotSame(CloudEvent.isValidEvent, CloudEvent.validateEvent)\r\n\r\n  // create an instance with only mandatory arguments (no strict mode, but doesn't matter in this case): expected success ...\r\n  const ceMinimal = new CloudEvent('1', // eventID\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\r\n    '/', // source\r\n    {} // data (empty) // optional, but useful the same in this sample usage\r\n  )\r\n  t.ok(ceMinimal)\r\n  // console.log(`DEBUG - cloudEvent details: ceMinimal = ${JSON.stringify(ceMinimal)}`)\r\n  // console.log(`DEBUG - cloudEvent details: ${CloudEvent.dumpObject(ceMinimal, 'ceMinimal')}`)\r\n  // console.log(`DEBUG - cloudEvent details: ${ceMinimal}`) // implicit call of its toString method ...\r\n  t.ok(CloudEvent.isValidEvent(ceMinimal))\r\n  t.strictSame(CloudEvent.validateEvent(ceMinimal), [])\r\n  // t.strictSame(CloudEvent.validateEvent(ceEmpty), []) // temp, to see the error during development ...\r\n  t.strictSame(CloudEvent.validateEvent(ceMinimal).length, 0) // simplify comparison of results, check only the  number of expected errors ...\r\n  // create another instance, similar\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceMinimal.isValid())\r\n  t.strictSame(ceMinimal.validate(), [])\r\n  t.strictSame(ceMinimal.validate().length, 0) // simplify comparison of results, check only the  number of expected errors ...\r\n  const ceMinimal2 = new CloudEvent('2', // eventID\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\r\n    '/', // source\r\n    {} // data (empty) // optional, but useful the same in this sample usage\r\n  )\r\n  t.ok(ceMinimal2)\r\n  t.ok(CloudEvent.isValidEvent(ceMinimal2)) // using default strict mode in the event\r\n  t.ok(CloudEvent.isValidEvent(ceMinimal2, { strict: false })) // same of previous but using strict mode in validation options\r\n  t.strictSame(CloudEvent.validateEvent(ceMinimal2), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceMinimal2).length, 0)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceMinimal2.isValid()) // using default strict mode in the event\r\n  t.ok(ceMinimal2.isValid({ strict: false })) // same of previous but using strict mode in validation options\r\n  t.strictSame(ceMinimal2.validate(), [])\r\n  t.strictSame(ceMinimal2.validate().length, 0)\r\n  // then ensure they are different (have different values inside) ...\r\n  assert(ceMinimal !== ceMinimal2) // they must be different object references\r\n  t.notSame(ceMinimal, ceMinimal2)\r\n  t.strictNotSame(ceMinimal, ceMinimal2)\r\n\r\n  // create an instance with a mandatory argument undefined (but no strict mode): expected success ...\r\n  // note that undefined arguments will be handled by default arguments, so all will be good the same here ...\r\n  const ceMinimalMandatoryUndefinedNoStrict = new CloudEvent(undefined, undefined, undefined, undefined, { strict: false })\r\n  assert(ceMinimalMandatoryUndefinedNoStrict !== null)\r\n  t.ok(ceMinimalMandatoryUndefinedNoStrict)\r\n  t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryUndefinedNoStrict)) // using default strict mode in the event\r\n  t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryUndefinedNoStrict, { strict: false })) // same of previous but using strict mode in validation options\r\n  t.strictSame(CloudEvent.validateEvent(ceMinimalMandatoryUndefinedNoStrict, { strict: false }).length, 3)\r\n  t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryUndefinedNoStrict, { strict: true })) // the same but validate with strict mode enabled ...\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(!ceMinimalMandatoryUndefinedNoStrict.isValid()) // using default strict mode in the event\r\n  t.ok(!ceMinimalMandatoryUndefinedNoStrict.isValid({ strict: false })) // same of previous but using strict mode in validation options\r\n  t.strictSame(ceMinimalMandatoryUndefinedNoStrict.validate({ strict: false }).length, 3)\r\n  t.ok(!ceMinimalMandatoryUndefinedNoStrict.isValid({ strict: true })) // the same but validate with strict mode enabled ...\r\n\r\n  // the same but with strict mode: expected exception ...\r\n  t.throws(function () {\r\n    const ceMinimalMandatoryUndefinedStrict = new CloudEvent(undefined, undefined, undefined, undefined, { strict: true })\r\n    assert(ceMinimalMandatoryUndefinedStrict === null) // never executed\r\n  }, Error, 'Expected exception when creating a CloudEvent without mandatory arguments with strict flag enabled')\r\n\r\n  // create an instance with a mandatory argument null (but no strict mode): expected success ...\r\n  // note that undefined arguments will be handled by default arguments, so all will be good the same here ...\r\n  const ceMinimalMandatoryNullNoStrict = new CloudEvent(null, null, null, null, { strict: false })\r\n  assert(ceMinimalMandatoryNullNoStrict !== null)\r\n  t.ok(ceMinimalMandatoryNullNoStrict)\r\n  t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryNullNoStrict)) // using default strict mode in the event\r\n  t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryNullNoStrict, { strict: false })) // same of previous but using strict mode in validation options\r\n  t.strictSame(CloudEvent.validateEvent(ceMinimalMandatoryNullNoStrict, { strict: false }).length, 3)\r\n  t.ok(!CloudEvent.isValidEvent(ceMinimalMandatoryNullNoStrict, { strict: true })) // the same but validate with strict mode enabled ...\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(!ceMinimalMandatoryNullNoStrict.isValid()) // using default strict mode in the event\r\n  t.ok(!ceMinimalMandatoryNullNoStrict.isValid({ strict: false })) // same of previous but using strict mode in validation options\r\n  t.strictSame(ceMinimalMandatoryNullNoStrict.validate({ strict: false }).length, 3)\r\n  t.ok(!ceMinimalMandatoryNullNoStrict.isValid({ strict: true })) // the same but validate with strict mode enabled ...\r\n\r\n  // the same but with strict mode: expected exception ...\r\n  t.throws(function () {\r\n    const ceMinimalMandatoryNullStrict = new CloudEvent(null, null, null, null, { strict: true })\r\n    assert(ceMinimalMandatoryNullStrict === null) // never executed\r\n  }, Error, 'Expected exception when creating a CloudEvent without mandatory arguments with strict flag enabled')\r\n})\r\n\r\n/** create some common options, for better reuse in tests */\r\nconst ceCommonOptions = {\r\n  eventTypeVersion: '1.0.0',\r\n  eventTime: new Date(),\r\n  extensions: { 'exampleExtension': 'value' },\r\n  contentType: 'application/json',\r\n  schemaURL: 'http://my-schema.localhost.localdomain',\r\n  strict: false\r\n}\r\n/** create some common options with strict flag enabled, for better reuse in tests */\r\nconst ceCommonOptionsStrict = { ...ceCommonOptions, strict: true }\r\n/** create some common data from an object, for better reuse in tests */\r\nconst ceCommonData = { 'hello': 'world', year: 2018 }\r\n/** create some common data from a Map, for better reuse in tests */\r\nconst ceMapData = new Map() // empty Map\r\n// const ceMapData = new Map(['key-1', 'value 1'], ['key-2', 'value 2'])\r\nceMapData.set('key-1', 'value 1')\r\nceMapData.set('key-2', 'value 2')\r\n\r\n/** @test {CloudEvent} */\r\ntest('create two CloudEvent instances with all arguments (mandatory and optional arguments) and ensure they are different objects', (t) => {\r\n  t.plan(21)\r\n  const CloudEvent = require('../src/') // reference the library\r\n  t.ok(CloudEvent)\r\n\r\n  // create an instance with an undefined mandatory argument (handled by defaults), but with strict flag disabled: expected success ...\r\n  // note that null values are not handled by default values, only undefined values ...\r\n  const ceFull1 = new CloudEvent('1/full',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    ceCommonData,\r\n    ceCommonOptions\r\n  )\r\n  t.ok(ceFull1)\r\n  t.ok(CloudEvent.isValidEvent(ceFull1))\r\n  t.ok(CloudEvent.isValidEvent(ceFull1, { strict: false }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFull1), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceFull1).length, 0)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFull1.isValid())\r\n  t.ok(ceFull1.isValid({ strict: false }))\r\n  t.strictSame(ceFull1.validate(), [])\r\n  t.strictSame(ceFull1.validate().length, 0)\r\n\r\n  // create another instance with all fields equals: expected success ...\r\n  const ceFull1Clone = new CloudEvent('1/full', // should be '2/full/no-strict' ...\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    ceCommonData,\r\n    ceCommonOptions\r\n  )\r\n  t.ok(ceFull1Clone)\r\n  t.ok(CloudEvent.isValidEvent(ceFull1Clone))\r\n  t.ok(CloudEvent.isValidEvent(ceFull1Clone, { strict: false }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFull1Clone), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceFull1Clone).length, 0)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFull1Clone.isValid())\r\n  t.ok(ceFull1Clone.isValid({ strict: false }))\r\n  t.strictSame(ceFull1Clone.validate(), [])\r\n  t.strictSame(ceFull1Clone.validate().length, 0)\r\n\r\n  // then ensure they are different objects ...\r\n  assert(ceFull1 !== ceFull1Clone) // they must be different object references\r\n  t.same(ceFull1, ceFull1Clone)\r\n  t.strictSame(ceFull1, ceFull1Clone)\r\n})\r\n\r\n/** @test {CloudEvent} */\r\ntest('create CloudEvent instances with different kind of data attribute, and ensure the validation is right', (t) => {\r\n  t.plan(81)\r\n  const CloudEvent = require('../src/') // reference the library\r\n  t.ok(CloudEvent)\r\n\r\n  // create an instance with undefined data attribute, but with strict flag disabled: expected success ...\r\n  // note that null values are not handled by default values, only undefined values ...\r\n  const ceFullDataUndefined = new CloudEvent('1/full/undefined-data/no-strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    undefined, // data\r\n    ceCommonOptions\r\n  )\r\n  assert(ceFullDataUndefined !== null)\r\n  t.ok(ceFullDataUndefined)\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataUndefined))\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataUndefined, { strict: false }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataUndefined), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataUndefined, { strict: false }).length, 0)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFullDataUndefined.isValid())\r\n  t.ok(ceFullDataUndefined.isValid({ strict: false }))\r\n  t.strictSame(ceFullDataUndefined.validate(), [])\r\n  t.strictSame(ceFullDataUndefined.validate({ strict: false }).length, 0)\r\n  // the same with with strict mode enabled ...\r\n  const ceFullDataUndefinedStrict = new CloudEvent('1/full/undefined-data/strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    undefined, // data\r\n    ceCommonOptionsStrict\r\n  )\r\n  assert(ceFullDataUndefinedStrict !== null)\r\n  t.ok(ceFullDataUndefinedStrict)\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataUndefinedStrict))\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataUndefinedStrict, { strict: true }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataUndefinedStrict), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataUndefinedStrict, { strict: true }).length, 0)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFullDataUndefinedStrict.isValid())\r\n  t.ok(ceFullDataUndefinedStrict.isValid({ strict: true }))\r\n  t.strictSame(ceFullDataUndefinedStrict.validate(), [])\r\n  t.strictSame(ceFullDataUndefinedStrict.validate({ strict: true }).length, 0)\r\n\r\n  // create an instance with null data attribute, but with strict flag disabled: expected success ...\r\n  // note that null values are not handled by default values, only undefined values ...\r\n  const ceFullDataNull = new CloudEvent('1/full/null-data/no-strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    null, // data\r\n    ceCommonOptions\r\n  )\r\n  assert(ceFullDataNull !== null)\r\n  t.ok(ceFullDataNull)\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataNull))\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataNull, { strict: false }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataNull), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataNull, { strict: false }).length, 0)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFullDataNull.isValid())\r\n  t.ok(ceFullDataNull.isValid({ strict: false }))\r\n  t.strictSame(ceFullDataNull.validate(), [])\r\n  t.strictSame(ceFullDataNull.validate({ strict: false }).length, 0)\r\n  // the same with with strict mode enabled ...\r\n  const ceFullDataNullStrict = new CloudEvent('1/full/null-data/strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    null, // data\r\n    ceCommonOptionsStrict\r\n  )\r\n  assert(ceFullDataNullStrict !== null)\r\n  t.ok(ceFullDataNullStrict)\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataNullStrict))\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataNullStrict, { strict: true }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataNullStrict), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataNullStrict, { strict: true }).length, 0)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFullDataNullStrict.isValid())\r\n  t.ok(ceFullDataNullStrict.isValid({ strict: true }))\r\n  t.strictSame(ceFullDataNullStrict.validate(), [])\r\n  t.strictSame(ceFullDataNullStrict.validate({ strict: true }).length, 0)\r\n\r\n  // create an instance with a string data attribute, but with strict flag disabled: expected success ...\r\n  const ceFullDataString = new CloudEvent('1/full/string-data/no-strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    'data as a string, bad here', // data\r\n    ceCommonOptions\r\n  )\r\n  assert(ceFullDataString !== null)\r\n  t.ok(ceFullDataString)\r\n  // data type errors handled only in strict mode currently ...\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataString))\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataString, { strict: false })) // good the same\r\n  t.ok(!CloudEvent.isValidEvent(ceFullDataString, { strict: true })) // bad here (right)\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataString), [])\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataString, { strict: false }).length, 0) // good the same\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataString, { strict: true }).length, 1) // bad here (right)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFullDataString.isValid())\r\n  t.ok(ceFullDataString.isValid({ strict: false }))\r\n  t.ok(!ceFullDataString.isValid({ strict: true }))\r\n  t.strictSame(ceFullDataString.validate(), [])\r\n  t.strictSame(ceFullDataString.validate({ strict: false }).length, 0)\r\n  t.strictSame(ceFullDataString.validate({ strict: true }).length, 1)\r\n  // the same with with strict mode enabled ...\r\n  const ceFullDataStringStrict = new CloudEvent('1/full/string-data/strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    'data as a string, bad here', // data\r\n    ceCommonOptionsStrict\r\n  )\r\n  assert(ceFullDataStringStrict !== null)\r\n  t.ok(ceFullDataStringStrict)\r\n  // data type errors handled only in strict mode currently ...\r\n  // note that in the following lines even if I force 'strict: false' he won't be used because already set in the object instance ...\r\n  t.ok(!CloudEvent.isValidEvent(ceFullDataStringStrict))\r\n  t.ok(!CloudEvent.isValidEvent(ceFullDataStringStrict, { strict: true }))\r\n  t.ok(!CloudEvent.isValidEvent(ceFullDataStringStrict, { strict: false }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataStringStrict).length, 1)\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataStringStrict, { strict: true }).length, 1)\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataStringStrict, { strict: false }).length, 1)\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(!ceFullDataStringStrict.isValid())\r\n  t.ok(!ceFullDataStringStrict.isValid({ strict: true }))\r\n  t.ok(!ceFullDataStringStrict.isValid({ strict: false }))\r\n  t.strictSame(ceFullDataStringStrict.validate().length, 1)\r\n  t.strictSame(ceFullDataStringStrict.validate({ strict: true }).length, 1)\r\n  t.strictSame(ceFullDataStringStrict.validate({ strict: false }).length, 1)\r\n\r\n  // create an instance with a sample Map data attribute, but with strict flag disabled: expected success ...\r\n  // note that null values are not handled by default values, only undefined values ...\r\n  const ceFullDataMap = new CloudEvent('1/full/map-data/no-strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    ceMapData, // data\r\n    ceCommonOptions\r\n  )\r\n  assert(ceFullDataMap !== null)\r\n  t.ok(ceFullDataMap)\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataMap))\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataMap, { strict: false }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataMap), []) // data type errors handled only in strict mode currently ...\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataMap, { strict: false }).length, 0) // data type errors handled only in strict mode currently ...\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFullDataMap.isValid())\r\n  t.ok(ceFullDataMap.isValid({ strict: false }))\r\n  t.strictSame(ceFullDataMap.validate(), []) // data type errors handled only in strict mode currently ...\r\n  t.strictSame(ceFullDataMap.validate({ strict: false }).length, 0) // data type errors handled only in strict mode currently ...\r\n  // the same with with strict mode enabled ...\r\n  const ceFullDataMapStrict = new CloudEvent('1/full/map-data/strict',\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent',\r\n    '/test',\r\n    ceMapData, // data\r\n    ceCommonOptionsStrict\r\n  )\r\n  assert(ceFullDataMapStrict !== null)\r\n  t.ok(ceFullDataMapStrict)\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataMapStrict))\r\n  t.ok(CloudEvent.isValidEvent(ceFullDataMapStrict, { strict: true }))\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataMapStrict).length, 0) // data type errors handled only in strict mode currently ...\r\n  t.strictSame(CloudEvent.validateEvent(ceFullDataMapStrict, { strict: true }).length, 0) // data type errors handled only in strict mode currently ...\r\n  // the same but using normal instance methods, to ensure they works good ...\r\n  t.ok(ceFullDataMapStrict.isValid())\r\n  t.ok(ceFullDataMapStrict.isValid({ strict: true }))\r\n  t.strictSame(ceFullDataMapStrict.validate().length, 0) // data type errors handled only in strict mode currently ...\r\n  t.strictSame(ceFullDataMapStrict.validate({ strict: true }).length, 0) // data type errors handled only in strict mode currently ...\r\n})\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/test/cloudevent.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "test4",
    "testId": 4,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test4",
    "access": null,
    "description": "ensure the CloudEvent class is exported by the library",
    "lineNumber": 22,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 121,
    "kind": "test",
    "name": "test5",
    "testId": 5,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test5",
    "access": null,
    "description": "ensure isValid and validate works good on undefined and null objects",
    "lineNumber": 37,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 122,
    "kind": "test",
    "name": "test6",
    "testId": 6,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test6",
    "access": null,
    "description": "create some CloudEvent instances (empty, without minimal arguments set or not set) and ensure they are different objects",
    "lineNumber": 54,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "test7",
    "testId": 7,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test7",
    "access": null,
    "description": "create some CloudEvent instances (with minimal fields set) and ensure they are different objects",
    "lineNumber": 89,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "test8",
    "testId": 8,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test8",
    "access": null,
    "description": "create two CloudEvent instances with all arguments (mandatory and optional arguments) and ensure they are different objects",
    "lineNumber": 199,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "test9",
    "testId": 9,
    "memberof": "test/cloudevent.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/cloudevent.test.js~test9",
    "access": null,
    "description": "create CloudEvent instances with different kind of data attribute, and ensure the validation is right",
    "lineNumber": 248,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 126,
    "kind": "testFile",
    "name": "test/validator.test.js",
    "content": "/*\r\n * Copyright 2018 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n'use strict'\r\n\r\nconst assert = require('assert')\r\nconst test = require('tap').test\r\n\r\n// const ceClassname = 'CloudEvent'\r\n\r\n/** @test {CloudEvent} */\r\ntest('ensure the Validator class (not exported by the library) works good', (t) => {\r\n  t.plan(4)\r\n  const V = require('../src/validator') // direct reference to the library\r\n  t.ok(V)\r\n  t.strictEqual(typeof V, 'function')\r\n\r\n  // optional, using some standard Node.js assert statements, as a sample\r\n  assert(V !== null)\r\n  assert.strictEqual(typeof V, 'function')\r\n  // assert(new V() instanceof V) // no more allowed\r\n\r\n  t.ok(V.isFunction(V.isClass))\r\n  t.throws(function () {\r\n    const v = new V()\r\n    assert(v === null) // never executed\r\n  }, Error, 'Expected exception when creating a Validator instance')\r\n})\r\n\r\n/** create some classes, for better reuse in following tests */\r\nconst CloudEvent = require('../src/') // reference the library\r\nclass NotCESubclass {\r\n}\r\nclass CESubclass extends CloudEvent {\r\n}\r\n\r\n/** @test {CloudEvent} */\r\ntest('create CloudEvent instances with different class hierarchy, and ensure the validation is right', (t) => {\r\n  t.plan(14)\r\n  const CEClass = require('../src/') // reference the library\r\n  t.ok(CEClass)\r\n  const V = require('../src/validator') // direct reference to the library\r\n  t.ok(V)\r\n\r\n  t.strictEqual(typeof V.isClass, 'function')\r\n  t.ok(V.isFunction(V.isClass))\r\n\r\n  // create an instance with only mandatory arguments (no strict mode, but doesn't matter in this case): expected success ...\r\n  const ceMinimal = new CEClass('1', // eventID\r\n    'com.github.smartiniOnGitHub.cloudeventjs.testevent', // eventType\r\n    {} // data (empty) // optional, but useful the same in this sample usage\r\n  )\r\n  t.ok(ceMinimal)\r\n  // console.log(`DEBUG - cloudEvent details: ceMinimal = ${JSON.stringify(ceMinimal)}`)\r\n  // console.log(`DEBUG - cloudEvent details: ${CEClass.dumpObject(ceMinimal, 'ceMinimal')}`)\r\n\r\n  // check that created instances belongs to the right base class\r\n  t.ok(V.isClass(ceMinimal, CEClass))\r\n  t.ok(V.isClass(ceMinimal, CloudEvent))\r\n  t.ok(!V.isClass(ceMinimal, NotCESubclass))\r\n  t.ok(!V.isClass(ceMinimal, CESubclass))\r\n\r\n  // create an instance with only mandatory arguments (no strict mode, but doesn't matter in this case): expected success ...\r\n  const ceMinimalSubclass = new CESubclass('1EX', // eventID\r\n    'org.github.smartiniOnGitHub.cloudeventjs.testeventEx', // eventType\r\n    {} // data (empty) // optional, but useful the same in this sample usage\r\n  )\r\n  t.ok(ceMinimalSubclass)\r\n  // console.log(`DEBUG - cloudEvent details: ceMinimalSubclass = ${JSON.stringify(ceMinimalSubclass)}`)\r\n  // console.log(`DEBUG - cloudEvent details: ${CEClass.dumpObject(ceMinimalSubclass, 'ceMinimalSubclass')}`)\r\n\r\n  // check that created instances belongs to the right base class\r\n  t.ok(V.isClass(ceMinimalSubclass, CEClass))\r\n  t.ok(V.isClass(ceMinimalSubclass, CloudEvent))\r\n  t.ok(!V.isClass(ceMinimalSubclass, NotCESubclass))\r\n  t.ok(V.isClass(ceMinimalSubclass, CESubclass))\r\n})\r\n",
    "static": true,
    "longname": "/Users/martinis/work/prove/cloudevent.js/test/validator.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "test10",
    "testId": 10,
    "memberof": "test/validator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validator.test.js~test10",
    "access": null,
    "description": "ensure the Validator class (not exported by the library) works good",
    "lineNumber": 24,
    "testTargets": [
      "CloudEvent"
    ]
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "test11",
    "testId": 11,
    "memberof": "test/validator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/validator.test.js~test11",
    "access": null,
    "description": "create CloudEvent instances with different class hierarchy, and ensure the validation is right",
    "lineNumber": 50,
    "testTargets": [
      "CloudEvent"
    ]
  }
]